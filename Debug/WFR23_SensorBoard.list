
WFR23_SensorBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000350c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08003618  08003618  00013618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036dc  080036dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080036dc  080036dc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080036dc  080036dc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036dc  080036dc  000136dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080036e0  080036e0  000136e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080036e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000070  08003754  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08003754  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007504  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b14  00000000  00000000  0002759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  000290b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d8  00000000  00000000  00029878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018447  00000000  00000000  00029f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ee1  00000000  00000000  00042397  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c88  00000000  00000000  0004b278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d3f00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025ac  00000000  00000000  000d3f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003600 	.word	0x08003600

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003600 	.word	0x08003600

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fbfe 	bl	8000950 <HAL_Init>
  //uint32_t sensorValues[8];

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f830 	bl	80001b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f972 	bl	8000440 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f952 	bl	8000404 <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f87a 	bl	8000258 <MX_ADC1_Init>
  MX_CAN_Init();
 8000164:	f000 f91a 	bl	800039c <MX_CAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_Start_DMA(&hadc1, sensorValues, adcChannelCount); // start adc in DMA mode
 8000168:	2308      	movs	r3, #8
 800016a:	461a      	mov	r2, r3
 800016c:	490d      	ldr	r1, [pc, #52]	; (80001a4 <main+0x58>)
 800016e:	480e      	ldr	r0, [pc, #56]	; (80001a8 <main+0x5c>)
 8000170:	f000 fd4c 	bl	8000c0c <HAL_ADC_Start_DMA>
	  while(adcReady == 0){
 8000174:	bf00      	nop
 8000176:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <main+0x60>)
 8000178:	681b      	ldr	r3, [r3, #0]
 800017a:	2b00      	cmp	r3, #0
 800017c:	d0fb      	beq.n	8000176 <main+0x2a>

	  }
	  adcReady = 0;
 800017e:	4b0b      	ldr	r3, [pc, #44]	; (80001ac <main+0x60>)
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
	  printf("s1: %d \n", sensorValues[0]);
 8000184:	4b07      	ldr	r3, [pc, #28]	; (80001a4 <main+0x58>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4619      	mov	r1, r3
 800018a:	4809      	ldr	r0, [pc, #36]	; (80001b0 <main+0x64>)
 800018c:	f002 faa4 	bl	80026d8 <iprintf>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 8000190:	2102      	movs	r1, #2
 8000192:	4808      	ldr	r0, [pc, #32]	; (80001b4 <main+0x68>)
 8000194:	f001 fdb6 	bl	8001d04 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000198:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800019c:	f000 fc3a 	bl	8000a14 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, sensorValues, adcChannelCount); // start adc in DMA mode
 80001a0:	e7e2      	b.n	8000168 <main+0x1c>
 80001a2:	bf00      	nop
 80001a4:	20000128 	.word	0x20000128
 80001a8:	2000008c 	.word	0x2000008c
 80001ac:	20000148 	.word	0x20000148
 80001b0:	08003618 	.word	0x08003618
 80001b4:	40010800 	.word	0x40010800

080001b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b094      	sub	sp, #80	; 0x50
 80001bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001c2:	2228      	movs	r2, #40	; 0x28
 80001c4:	2100      	movs	r1, #0
 80001c6:	4618      	mov	r0, r3
 80001c8:	f002 fa7e 	bl	80026c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001cc:	f107 0314 	add.w	r3, r7, #20
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]
 80001d8:	60da      	str	r2, [r3, #12]
 80001da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	2200      	movs	r2, #0
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	605a      	str	r2, [r3, #4]
 80001e4:	609a      	str	r2, [r3, #8]
 80001e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001e8:	2302      	movs	r3, #2
 80001ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ec:	2301      	movs	r3, #1
 80001ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f0:	2310      	movs	r3, #16
 80001f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001f4:	2300      	movs	r3, #0
 80001f6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fd9b 	bl	8001d38 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000208:	f000 f966 	bl	80004d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000210:	2300      	movs	r3, #0
 8000212:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000218:	2300      	movs	r3, #0
 800021a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f002 f808 	bl	800223c <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000232:	f000 f951 	bl	80004d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000236:	2302      	movs	r3, #2
 8000238:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 800023a:	2300      	movs	r3, #0
 800023c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f002 f961 	bl	8002508 <HAL_RCCEx_PeriphCLKConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800024c:	f000 f944 	bl	80004d8 <Error_Handler>
  }
}
 8000250:	bf00      	nop
 8000252:	3750      	adds	r7, #80	; 0x50
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000268:	4b4a      	ldr	r3, [pc, #296]	; (8000394 <MX_ADC1_Init+0x13c>)
 800026a:	4a4b      	ldr	r2, [pc, #300]	; (8000398 <MX_ADC1_Init+0x140>)
 800026c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800026e:	4b49      	ldr	r3, [pc, #292]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000274:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000276:	4b47      	ldr	r3, [pc, #284]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000278:	2201      	movs	r2, #1
 800027a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800027c:	4b45      	ldr	r3, [pc, #276]	; (8000394 <MX_ADC1_Init+0x13c>)
 800027e:	2200      	movs	r2, #0
 8000280:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000282:	4b44      	ldr	r3, [pc, #272]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000284:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000288:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800028a:	4b42      	ldr	r3, [pc, #264]	; (8000394 <MX_ADC1_Init+0x13c>)
 800028c:	2200      	movs	r2, #0
 800028e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 8;
 8000290:	4b40      	ldr	r3, [pc, #256]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000292:	2208      	movs	r2, #8
 8000294:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000296:	483f      	ldr	r0, [pc, #252]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000298:	f000 fbe0 	bl	8000a5c <HAL_ADC_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 80002a2:	f000 f919 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80002a6:	2302      	movs	r3, #2
 80002a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002aa:	2301      	movs	r3, #1
 80002ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002ae:	2300      	movs	r3, #0
 80002b0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4619      	mov	r1, r3
 80002b6:	4837      	ldr	r0, [pc, #220]	; (8000394 <MX_ADC1_Init+0x13c>)
 80002b8:	f000 fd98 	bl	8000dec <HAL_ADC_ConfigChannel>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80002c2:	f000 f909 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002c6:	2303      	movs	r3, #3
 80002c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80002ca:	2302      	movs	r3, #2
 80002cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	4830      	ldr	r0, [pc, #192]	; (8000394 <MX_ADC1_Init+0x13c>)
 80002d4:	f000 fd8a 	bl	8000dec <HAL_ADC_ConfigChannel>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80002de:	f000 f8fb 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80002e2:	2304      	movs	r3, #4
 80002e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80002e6:	2303      	movs	r3, #3
 80002e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002ea:	1d3b      	adds	r3, r7, #4
 80002ec:	4619      	mov	r1, r3
 80002ee:	4829      	ldr	r0, [pc, #164]	; (8000394 <MX_ADC1_Init+0x13c>)
 80002f0:	f000 fd7c 	bl	8000dec <HAL_ADC_ConfigChannel>
 80002f4:	4603      	mov	r3, r0
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d001      	beq.n	80002fe <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80002fa:	f000 f8ed 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80002fe:	2305      	movs	r3, #5
 8000300:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000302:	2304      	movs	r3, #4
 8000304:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	4619      	mov	r1, r3
 800030a:	4822      	ldr	r0, [pc, #136]	; (8000394 <MX_ADC1_Init+0x13c>)
 800030c:	f000 fd6e 	bl	8000dec <HAL_ADC_ConfigChannel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 8000316:	f000 f8df 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800031a:	2306      	movs	r3, #6
 800031c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800031e:	2305      	movs	r3, #5
 8000320:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	4619      	mov	r1, r3
 8000326:	481b      	ldr	r0, [pc, #108]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000328:	f000 fd60 	bl	8000dec <HAL_ADC_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000332:	f000 f8d1 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000336:	2307      	movs	r3, #7
 8000338:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800033a:	2306      	movs	r3, #6
 800033c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	4619      	mov	r1, r3
 8000342:	4814      	ldr	r0, [pc, #80]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000344:	f000 fd52 	bl	8000dec <HAL_ADC_ConfigChannel>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800034e:	f000 f8c3 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000352:	2308      	movs	r3, #8
 8000354:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000356:	2307      	movs	r3, #7
 8000358:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4619      	mov	r1, r3
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <MX_ADC1_Init+0x13c>)
 8000360:	f000 fd44 	bl	8000dec <HAL_ADC_ConfigChannel>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 800036a:	f000 f8b5 	bl	80004d8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800036e:	2309      	movs	r3, #9
 8000370:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000372:	2308      	movs	r3, #8
 8000374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_ADC1_Init+0x13c>)
 800037c:	f000 fd36 	bl	8000dec <HAL_ADC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8000386:	f000 f8a7 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	2000008c 	.word	0x2000008c
 8000398:	40012400 	.word	0x40012400

0800039c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <MX_CAN_Init+0x60>)
 80003a2:	4a17      	ldr	r2, [pc, #92]	; (8000400 <MX_CAN_Init+0x64>)
 80003a4:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <MX_CAN_Init+0x60>)
 80003a8:	2210      	movs	r2, #16
 80003aa:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <MX_CAN_Init+0x60>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <MX_CAN_Init+0x60>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80003b8:	4b10      	ldr	r3, [pc, #64]	; (80003fc <MX_CAN_Init+0x60>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <MX_CAN_Init+0x60>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80003c4:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <MX_CAN_Init+0x60>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <MX_CAN_Init+0x60>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <MX_CAN_Init+0x60>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <MX_CAN_Init+0x60>)
 80003d8:	2200      	movs	r2, #0
 80003da:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80003dc:	4b07      	ldr	r3, [pc, #28]	; (80003fc <MX_CAN_Init+0x60>)
 80003de:	2200      	movs	r2, #0
 80003e0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <MX_CAN_Init+0x60>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80003e8:	4804      	ldr	r0, [pc, #16]	; (80003fc <MX_CAN_Init+0x60>)
 80003ea:	f000 fef8 	bl	80011de <HAL_CAN_Init>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80003f4:	f000 f870 	bl	80004d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000100 	.word	0x20000100
 8000400:	40006400 	.word	0x40006400

08000404 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800040a:	4b0c      	ldr	r3, [pc, #48]	; (800043c <MX_DMA_Init+0x38>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	4a0b      	ldr	r2, [pc, #44]	; (800043c <MX_DMA_Init+0x38>)
 8000410:	f043 0301 	orr.w	r3, r3, #1
 8000414:	6153      	str	r3, [r2, #20]
 8000416:	4b09      	ldr	r3, [pc, #36]	; (800043c <MX_DMA_Init+0x38>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f003 0301 	and.w	r3, r3, #1
 800041e:	607b      	str	r3, [r7, #4]
 8000420:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000422:	2200      	movs	r2, #0
 8000424:	2100      	movs	r1, #0
 8000426:	200b      	movs	r0, #11
 8000428:	f001 f8ab 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800042c:	200b      	movs	r0, #11
 800042e:	f001 f8c4 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 8000432:	bf00      	nop
 8000434:	3708      	adds	r7, #8
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40021000 	.word	0x40021000

08000440 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	605a      	str	r2, [r3, #4]
 8000450:	609a      	str	r2, [r3, #8]
 8000452:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000454:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <MX_GPIO_Init+0x74>)
 8000456:	699b      	ldr	r3, [r3, #24]
 8000458:	4a16      	ldr	r2, [pc, #88]	; (80004b4 <MX_GPIO_Init+0x74>)
 800045a:	f043 0304 	orr.w	r3, r3, #4
 800045e:	6193      	str	r3, [r2, #24]
 8000460:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <MX_GPIO_Init+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	f003 0304 	and.w	r3, r3, #4
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800046c:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <MX_GPIO_Init+0x74>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <MX_GPIO_Init+0x74>)
 8000472:	f043 0308 	orr.w	r3, r3, #8
 8000476:	6193      	str	r3, [r2, #24]
 8000478:	4b0e      	ldr	r3, [pc, #56]	; (80004b4 <MX_GPIO_Init+0x74>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	f003 0308 	and.w	r3, r3, #8
 8000480:	603b      	str	r3, [r7, #0]
 8000482:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	2102      	movs	r1, #2
 8000488:	480b      	ldr	r0, [pc, #44]	; (80004b8 <MX_GPIO_Init+0x78>)
 800048a:	f001 fc23 	bl	8001cd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800048e:	2302      	movs	r3, #2
 8000490:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000492:	2301      	movs	r3, #1
 8000494:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000496:	2300      	movs	r3, #0
 8000498:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049a:	2302      	movs	r3, #2
 800049c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	4619      	mov	r1, r3
 80004a4:	4804      	ldr	r0, [pc, #16]	; (80004b8 <MX_GPIO_Init+0x78>)
 80004a6:	f001 fa91 	bl	80019cc <HAL_GPIO_Init>

}
 80004aa:	bf00      	nop
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40010800 	.word	0x40010800

080004bc <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  adcReady = 1;
 80004c4:	4b03      	ldr	r3, [pc, #12]	; (80004d4 <HAL_ADC_ConvCpltCallback+0x18>)
 80004c6:	2201      	movs	r2, #1
 80004c8:	601a      	str	r2, [r3, #0]
}
 80004ca:	bf00      	nop
 80004cc:	370c      	adds	r7, #12
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bc80      	pop	{r7}
 80004d2:	4770      	bx	lr
 80004d4:	20000148 	.word	0x20000148

080004d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004dc:	b672      	cpsid	i
}
 80004de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <Error_Handler+0x8>
	...

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004ea:	4b15      	ldr	r3, [pc, #84]	; (8000540 <HAL_MspInit+0x5c>)
 80004ec:	699b      	ldr	r3, [r3, #24]
 80004ee:	4a14      	ldr	r2, [pc, #80]	; (8000540 <HAL_MspInit+0x5c>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6193      	str	r3, [r2, #24]
 80004f6:	4b12      	ldr	r3, [pc, #72]	; (8000540 <HAL_MspInit+0x5c>)
 80004f8:	699b      	ldr	r3, [r3, #24]
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	60bb      	str	r3, [r7, #8]
 8000500:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b0f      	ldr	r3, [pc, #60]	; (8000540 <HAL_MspInit+0x5c>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	4a0e      	ldr	r2, [pc, #56]	; (8000540 <HAL_MspInit+0x5c>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	61d3      	str	r3, [r2, #28]
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_MspInit+0x5c>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800051a:	4b0a      	ldr	r3, [pc, #40]	; (8000544 <HAL_MspInit+0x60>)
 800051c:	685b      	ldr	r3, [r3, #4]
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000526:	60fb      	str	r3, [r7, #12]
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	4a04      	ldr	r2, [pc, #16]	; (8000544 <HAL_MspInit+0x60>)
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000536:	bf00      	nop
 8000538:	3714      	adds	r7, #20
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr
 8000540:	40021000 	.word	0x40021000
 8000544:	40010000 	.word	0x40010000

08000548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b08a      	sub	sp, #40	; 0x28
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
 8000558:	605a      	str	r2, [r3, #4]
 800055a:	609a      	str	r2, [r3, #8]
 800055c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4a33      	ldr	r2, [pc, #204]	; (8000630 <HAL_ADC_MspInit+0xe8>)
 8000564:	4293      	cmp	r3, r2
 8000566:	d15f      	bne.n	8000628 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000568:	4b32      	ldr	r3, [pc, #200]	; (8000634 <HAL_ADC_MspInit+0xec>)
 800056a:	699b      	ldr	r3, [r3, #24]
 800056c:	4a31      	ldr	r2, [pc, #196]	; (8000634 <HAL_ADC_MspInit+0xec>)
 800056e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000572:	6193      	str	r3, [r2, #24]
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <HAL_ADC_MspInit+0xec>)
 8000576:	699b      	ldr	r3, [r3, #24]
 8000578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800057c:	617b      	str	r3, [r7, #20]
 800057e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <HAL_ADC_MspInit+0xec>)
 8000582:	699b      	ldr	r3, [r3, #24]
 8000584:	4a2b      	ldr	r2, [pc, #172]	; (8000634 <HAL_ADC_MspInit+0xec>)
 8000586:	f043 0304 	orr.w	r3, r3, #4
 800058a:	6193      	str	r3, [r2, #24]
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <HAL_ADC_MspInit+0xec>)
 800058e:	699b      	ldr	r3, [r3, #24]
 8000590:	f003 0304 	and.w	r3, r3, #4
 8000594:	613b      	str	r3, [r7, #16]
 8000596:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <HAL_ADC_MspInit+0xec>)
 800059a:	699b      	ldr	r3, [r3, #24]
 800059c:	4a25      	ldr	r2, [pc, #148]	; (8000634 <HAL_ADC_MspInit+0xec>)
 800059e:	f043 0308 	orr.w	r3, r3, #8
 80005a2:	6193      	str	r3, [r2, #24]
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <HAL_ADC_MspInit+0xec>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	f003 0308 	and.w	r3, r3, #8
 80005ac:	60fb      	str	r3, [r7, #12]
 80005ae:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80005b0:	23fc      	movs	r3, #252	; 0xfc
 80005b2:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005b4:	2303      	movs	r3, #3
 80005b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005b8:	f107 0318 	add.w	r3, r7, #24
 80005bc:	4619      	mov	r1, r3
 80005be:	481e      	ldr	r0, [pc, #120]	; (8000638 <HAL_ADC_MspInit+0xf0>)
 80005c0:	f001 fa04 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80005c4:	2303      	movs	r3, #3
 80005c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c8:	2303      	movs	r3, #3
 80005ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005cc:	f107 0318 	add.w	r3, r7, #24
 80005d0:	4619      	mov	r1, r3
 80005d2:	481a      	ldr	r0, [pc, #104]	; (800063c <HAL_ADC_MspInit+0xf4>)
 80005d4:	f001 f9fa 	bl	80019cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005da:	4a1a      	ldr	r2, [pc, #104]	; (8000644 <HAL_ADC_MspInit+0xfc>)
 80005dc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005ec:	2280      	movs	r2, #128	; 0x80
 80005ee:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005f6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 80005fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80005fe:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800060c:	480c      	ldr	r0, [pc, #48]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 800060e:	f000 ffef 	bl	80015f0 <HAL_DMA_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8000618:	f7ff ff5e 	bl	80004d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	4a08      	ldr	r2, [pc, #32]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 8000620:	621a      	str	r2, [r3, #32]
 8000622:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_ADC_MspInit+0xf8>)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40012400 	.word	0x40012400
 8000634:	40021000 	.word	0x40021000
 8000638:	40010800 	.word	0x40010800
 800063c:	40010c00 	.word	0x40010c00
 8000640:	200000bc 	.word	0x200000bc
 8000644:	40020008 	.word	0x40020008

08000648 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b08a      	sub	sp, #40	; 0x28
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000650:	f107 0314 	add.w	r3, r7, #20
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4a25      	ldr	r2, [pc, #148]	; (80006f8 <HAL_CAN_MspInit+0xb0>)
 8000664:	4293      	cmp	r3, r2
 8000666:	d143      	bne.n	80006f0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 800066a:	69db      	ldr	r3, [r3, #28]
 800066c:	4a23      	ldr	r2, [pc, #140]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 800066e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000672:	61d3      	str	r3, [r2, #28]
 8000674:	4b21      	ldr	r3, [pc, #132]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800067c:	613b      	str	r3, [r7, #16]
 800067e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000680:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6193      	str	r3, [r2, #24]
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_CAN_MspInit+0xb4>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	f003 0308 	and.w	r3, r3, #8
 8000694:	60fb      	str	r3, [r7, #12]
 8000696:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800069e:	2300      	movs	r3, #0
 80006a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4814      	ldr	r0, [pc, #80]	; (8000700 <HAL_CAN_MspInit+0xb8>)
 80006ae:	f001 f98d 	bl	80019cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80006b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b8:	2302      	movs	r3, #2
 80006ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0314 	add.w	r3, r7, #20
 80006c4:	4619      	mov	r1, r3
 80006c6:	480e      	ldr	r0, [pc, #56]	; (8000700 <HAL_CAN_MspInit+0xb8>)
 80006c8:	f001 f980 	bl	80019cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80006cc:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_CAN_MspInit+0xbc>)
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
 80006d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
 80006da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006dc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
 80006e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
 80006ea:	4a06      	ldr	r2, [pc, #24]	; (8000704 <HAL_CAN_MspInit+0xbc>)
 80006ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ee:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80006f0:	bf00      	nop
 80006f2:	3728      	adds	r7, #40	; 0x28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	40006400 	.word	0x40006400
 80006fc:	40021000 	.word	0x40021000
 8000700:	40010c00 	.word	0x40010c00
 8000704:	40010000 	.word	0x40010000

08000708 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800070c:	e7fe      	b.n	800070c <NMI_Handler+0x4>

0800070e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070e:	b480      	push	{r7}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000712:	e7fe      	b.n	8000712 <HardFault_Handler+0x4>

08000714 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000718:	e7fe      	b.n	8000718 <MemManage_Handler+0x4>

0800071a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071e:	e7fe      	b.n	800071e <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	e7fe      	b.n	8000724 <UsageFault_Handler+0x4>

08000726 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr

0800074a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800074e:	f000 f945 	bl	80009dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <DMA1_Channel1_IRQHandler+0x10>)
 800075e:	f001 f801 	bl	8001764 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200000bc 	.word	0x200000bc

0800076c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <ITM_SendChar+0x44>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0d      	ldr	r2, [pc, #52]	; (80007b0 <ITM_SendChar+0x44>)
 800077c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000780:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000782:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <ITM_SendChar+0x48>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a0b      	ldr	r2, [pc, #44]	; (80007b4 <ITM_SendChar+0x48>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800078e:	bf00      	nop
 8000790:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f8      	beq.n	8000790 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800079e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	6013      	str	r3, [r2, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr
 80007b0:	e000edfc 	.word	0xe000edfc
 80007b4:	e0000e00 	.word	0xe0000e00

080007b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b086      	sub	sp, #24
 80007bc:	af00      	add	r7, sp, #0
 80007be:	60f8      	str	r0, [r7, #12]
 80007c0:	60b9      	str	r1, [r7, #8]
 80007c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
 80007c8:	e00a      	b.n	80007e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80007ca:	f3af 8000 	nop.w
 80007ce:	4601      	mov	r1, r0
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	1c5a      	adds	r2, r3, #1
 80007d4:	60ba      	str	r2, [r7, #8]
 80007d6:	b2ca      	uxtb	r2, r1
 80007d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	3301      	adds	r3, #1
 80007de:	617b      	str	r3, [r7, #20]
 80007e0:	697a      	ldr	r2, [r7, #20]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	429a      	cmp	r2, r3
 80007e6:	dbf0      	blt.n	80007ca <_read+0x12>
	}

return len;
 80007e8:	687b      	ldr	r3, [r7, #4]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
 8000802:	e009      	b.n	8000818 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000804:	68bb      	ldr	r3, [r7, #8]
 8000806:	1c5a      	adds	r2, r3, #1
 8000808:	60ba      	str	r2, [r7, #8]
 800080a:	781b      	ldrb	r3, [r3, #0]
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ffad 	bl	800076c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	3301      	adds	r3, #1
 8000816:	617b      	str	r3, [r7, #20]
 8000818:	697a      	ldr	r2, [r7, #20]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	429a      	cmp	r2, r3
 800081e:	dbf1      	blt.n	8000804 <_write+0x12>
	}
	return len;
 8000820:	687b      	ldr	r3, [r7, #4]
}
 8000822:	4618      	mov	r0, r3
 8000824:	3718      	adds	r7, #24
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <_close>:

int _close(int file)
{
 800082a:	b480      	push	{r7}
 800082c:	b083      	sub	sp, #12
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	return -1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000836:	4618      	mov	r0, r3
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000850:	605a      	str	r2, [r3, #4]
	return 0;
 8000852:	2300      	movs	r3, #0
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <_isatty>:

int _isatty(int file)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
	return 1;
 8000866:	2301      	movs	r3, #1
}
 8000868:	4618      	mov	r0, r3
 800086a:	370c      	adds	r7, #12
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr

08000872 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000872:	b480      	push	{r7}
 8000874:	b085      	sub	sp, #20
 8000876:	af00      	add	r7, sp, #0
 8000878:	60f8      	str	r0, [r7, #12]
 800087a:	60b9      	str	r1, [r7, #8]
 800087c:	607a      	str	r2, [r7, #4]
	return 0;
 800087e:	2300      	movs	r3, #0
}
 8000880:	4618      	mov	r0, r3
 8000882:	3714      	adds	r7, #20
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
	...

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	; (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f001 feda 	bl	8002674 <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20005000 	.word	0x20005000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	2000014c 	.word	0x2000014c
 80008f4:	20000168 	.word	0x20000168

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000904:	480c      	ldr	r0, [pc, #48]	; (8000938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000906:	490d      	ldr	r1, [pc, #52]	; (800093c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000908:	4a0d      	ldr	r2, [pc, #52]	; (8000940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800090a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800090c:	e002      	b.n	8000914 <LoopCopyDataInit>

0800090e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800090e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000912:	3304      	adds	r3, #4

08000914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000918:	d3f9      	bcc.n	800090e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800091c:	4c0a      	ldr	r4, [pc, #40]	; (8000948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000920:	e001      	b.n	8000926 <LoopFillZerobss>

08000922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000924:	3204      	adds	r2, #4

08000926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000928:	d3fb      	bcc.n	8000922 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800092a:	f7ff ffe5 	bl	80008f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800092e:	f001 fea7 	bl	8002680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000932:	f7ff fc0b 	bl	800014c <main>
  bx lr
 8000936:	4770      	bx	lr
  ldr r0, =_sdata
 8000938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800093c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000940:	080036e4 	.word	0x080036e4
  ldr r2, =_sbss
 8000944:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000948:	20000164 	.word	0x20000164

0800094c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800094c:	e7fe      	b.n	800094c <ADC1_2_IRQHandler>
	...

08000950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_Init+0x28>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a07      	ldr	r2, [pc, #28]	; (8000978 <HAL_Init+0x28>)
 800095a:	f043 0310 	orr.w	r3, r3, #16
 800095e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000960:	2003      	movs	r0, #3
 8000962:	f000 fe03 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000966:	200f      	movs	r0, #15
 8000968:	f000 f808 	bl	800097c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800096c:	f7ff fdba 	bl	80004e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40022000 	.word	0x40022000

0800097c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_InitTick+0x54>)
 8000986:	681a      	ldr	r2, [r3, #0]
 8000988:	4b12      	ldr	r3, [pc, #72]	; (80009d4 <HAL_InitTick+0x58>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000992:	fbb3 f3f1 	udiv	r3, r3, r1
 8000996:	fbb2 f3f3 	udiv	r3, r2, r3
 800099a:	4618      	mov	r0, r3
 800099c:	f000 fe1b 	bl	80015d6 <HAL_SYSTICK_Config>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	e00e      	b.n	80009c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d80a      	bhi.n	80009c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 fde3 	bl	8001582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <HAL_InitTick+0x5c>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009c2:	2300      	movs	r3, #0
 80009c4:	e000      	b.n	80009c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000000 	.word	0x20000000
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000004 	.word	0x20000004

080009dc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x1c>)
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	461a      	mov	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <HAL_IncTick+0x20>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	4413      	add	r3, r2
 80009ec:	4a03      	ldr	r2, [pc, #12]	; (80009fc <HAL_IncTick+0x20>)
 80009ee:	6013      	str	r3, [r2, #0]
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr
 80009f8:	20000008 	.word	0x20000008
 80009fc:	20000150 	.word	0x20000150

08000a00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  return uwTick;
 8000a04:	4b02      	ldr	r3, [pc, #8]	; (8000a10 <HAL_GetTick+0x10>)
 8000a06:	681b      	ldr	r3, [r3, #0]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	20000150 	.word	0x20000150

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff fff0 	bl	8000a00 <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffe0 	bl	8000a00 <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a64:	2300      	movs	r3, #0
 8000a66:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e0be      	b.n	8000bfc <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d109      	bne.n	8000aa0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2200      	movs	r2, #0
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff fd54 	bl	8000548 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f000 faf5 	bl	8001090 <ADC_ConversionStop_Disable>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aae:	f003 0310 	and.w	r3, r3, #16
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	f040 8099 	bne.w	8000bea <HAL_ADC_Init+0x18e>
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	f040 8095 	bne.w	8000bea <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ac4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000ac8:	f023 0302 	bic.w	r3, r3, #2
 8000acc:	f043 0202 	orr.w	r2, r3, #2
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000adc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	7b1b      	ldrb	r3, [r3, #12]
 8000ae2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ae4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ae6:	68ba      	ldr	r2, [r7, #8]
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	689b      	ldr	r3, [r3, #8]
 8000af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000af4:	d003      	beq.n	8000afe <HAL_ADC_Init+0xa2>
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	689b      	ldr	r3, [r3, #8]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d102      	bne.n	8000b04 <HAL_ADC_Init+0xa8>
 8000afe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b02:	e000      	b.n	8000b06 <HAL_ADC_Init+0xaa>
 8000b04:	2300      	movs	r3, #0
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	7d1b      	ldrb	r3, [r3, #20]
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d119      	bne.n	8000b48 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	7b1b      	ldrb	r3, [r3, #12]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d109      	bne.n	8000b30 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	035a      	lsls	r2, r3, #13
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	4313      	orrs	r3, r2
 8000b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b2c:	613b      	str	r3, [r7, #16]
 8000b2e:	e00b      	b.n	8000b48 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b34:	f043 0220 	orr.w	r2, r3, #32
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689a      	ldr	r2, [r3, #8]
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_ADC_Init+0x1a8>)
 8000b64:	4013      	ands	r3, r2
 8000b66:	687a      	ldr	r2, [r7, #4]
 8000b68:	6812      	ldr	r2, [r2, #0]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	430b      	orrs	r3, r1
 8000b6e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	689b      	ldr	r3, [r3, #8]
 8000b74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b78:	d003      	beq.n	8000b82 <HAL_ADC_Init+0x126>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	689b      	ldr	r3, [r3, #8]
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d104      	bne.n	8000b8c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	051b      	lsls	r3, r3, #20
 8000b8a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b92:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	430a      	orrs	r2, r1
 8000b9e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	689a      	ldr	r2, [r3, #8]
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_Init+0x1ac>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d10b      	bne.n	8000bc8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bba:	f023 0303 	bic.w	r3, r3, #3
 8000bbe:	f043 0201 	orr.w	r2, r3, #1
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bc6:	e018      	b.n	8000bfa <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bcc:	f023 0312 	bic.w	r3, r3, #18
 8000bd0:	f043 0210 	orr.w	r2, r3, #16
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	f043 0201 	orr.w	r2, r3, #1
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000be4:	2301      	movs	r3, #1
 8000be6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000be8:	e007      	b.n	8000bfa <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bee:	f043 0210 	orr.w	r2, r3, #16
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	ffe1f7fd 	.word	0xffe1f7fd
 8000c08:	ff1f0efe 	.word	0xff1f0efe

08000c0c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a64      	ldr	r2, [pc, #400]	; (8000db4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d004      	beq.n	8000c30 <HAL_ADC_Start_DMA+0x24>
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	4a63      	ldr	r2, [pc, #396]	; (8000db8 <HAL_ADC_Start_DMA+0x1ac>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d106      	bne.n	8000c3e <HAL_ADC_Start_DMA+0x32>
 8000c30:	4b60      	ldr	r3, [pc, #384]	; (8000db4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f040 80b3 	bne.w	8000da4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d101      	bne.n	8000c4c <HAL_ADC_Start_DMA+0x40>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e0ae      	b.n	8000daa <HAL_ADC_Start_DMA+0x19e>
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000c54:	68f8      	ldr	r0, [r7, #12]
 8000c56:	f000 f9c1 	bl	8000fdc <ADC_Enable>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000c5e:	7dfb      	ldrb	r3, [r7, #23]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f040 809a 	bne.w	8000d9a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c6e:	f023 0301 	bic.w	r3, r3, #1
 8000c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a4e      	ldr	r2, [pc, #312]	; (8000db8 <HAL_ADC_Start_DMA+0x1ac>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d105      	bne.n	8000c90 <HAL_ADC_Start_DMA+0x84>
 8000c84:	4b4b      	ldr	r3, [pc, #300]	; (8000db4 <HAL_ADC_Start_DMA+0x1a8>)
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d115      	bne.n	8000cbc <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c94:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d026      	beq.n	8000cf8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000cba:	e01d      	b.n	8000cf8 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a39      	ldr	r2, [pc, #228]	; (8000db4 <HAL_ADC_Start_DMA+0x1a8>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d004      	beq.n	8000cdc <HAL_ADC_Start_DMA+0xd0>
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a38      	ldr	r2, [pc, #224]	; (8000db8 <HAL_ADC_Start_DMA+0x1ac>)
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d10d      	bne.n	8000cf8 <HAL_ADC_Start_DMA+0xec>
 8000cdc:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <HAL_ADC_Start_DMA+0x1a8>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d007      	beq.n	8000cf8 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000cf0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d006      	beq.n	8000d12 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d08:	f023 0206 	bic.w	r2, r3, #6
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d10:	e002      	b.n	8000d18 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	2200      	movs	r2, #0
 8000d16:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <HAL_ADC_Start_DMA+0x1b0>)
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	6a1b      	ldr	r3, [r3, #32]
 8000d2c:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_ADC_Start_DMA+0x1b4>)
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6a1b      	ldr	r3, [r3, #32]
 8000d34:	4a23      	ldr	r2, [pc, #140]	; (8000dc4 <HAL_ADC_Start_DMA+0x1b8>)
 8000d36:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f06f 0202 	mvn.w	r2, #2
 8000d40:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	689a      	ldr	r2, [r3, #8]
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d50:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6a18      	ldr	r0, [r3, #32]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	334c      	adds	r3, #76	; 0x4c
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	68ba      	ldr	r2, [r7, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f000 fc9f 	bl	80016a4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	689b      	ldr	r3, [r3, #8]
 8000d6c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000d70:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000d74:	d108      	bne.n	8000d88 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689a      	ldr	r2, [r3, #8]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000d84:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d86:	e00f      	b.n	8000da8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000d96:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000d98:	e006      	b.n	8000da8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000da2:	e001      	b.n	8000da8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40012400 	.word	0x40012400
 8000db8:	40012800 	.word	0x40012800
 8000dbc:	08001113 	.word	0x08001113
 8000dc0:	0800118f 	.word	0x0800118f
 8000dc4:	080011ab 	.word	0x080011ab

08000dc8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr

08000dda <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	b083      	sub	sp, #12
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000df6:	2300      	movs	r3, #0
 8000df8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d101      	bne.n	8000e0c <HAL_ADC_ConfigChannel+0x20>
 8000e08:	2302      	movs	r3, #2
 8000e0a:	e0dc      	b.n	8000fc6 <HAL_ADC_ConfigChannel+0x1da>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2b06      	cmp	r3, #6
 8000e1a:	d81c      	bhi.n	8000e56 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	685a      	ldr	r2, [r3, #4]
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	3b05      	subs	r3, #5
 8000e2e:	221f      	movs	r2, #31
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	4019      	ands	r1, r3
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	6818      	ldr	r0, [r3, #0]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685a      	ldr	r2, [r3, #4]
 8000e40:	4613      	mov	r3, r2
 8000e42:	009b      	lsls	r3, r3, #2
 8000e44:	4413      	add	r3, r2
 8000e46:	3b05      	subs	r3, #5
 8000e48:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	430a      	orrs	r2, r1
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
 8000e54:	e03c      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b0c      	cmp	r3, #12
 8000e5c:	d81c      	bhi.n	8000e98 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4613      	mov	r3, r2
 8000e6a:	009b      	lsls	r3, r3, #2
 8000e6c:	4413      	add	r3, r2
 8000e6e:	3b23      	subs	r3, #35	; 0x23
 8000e70:	221f      	movs	r2, #31
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	4019      	ands	r1, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	4613      	mov	r3, r2
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	3b23      	subs	r3, #35	; 0x23
 8000e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	631a      	str	r2, [r3, #48]	; 0x30
 8000e96:	e01b      	b.n	8000ed0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685a      	ldr	r2, [r3, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	4413      	add	r3, r2
 8000ea8:	3b41      	subs	r3, #65	; 0x41
 8000eaa:	221f      	movs	r2, #31
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	4019      	ands	r1, r3
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685a      	ldr	r2, [r3, #4]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	3b41      	subs	r3, #65	; 0x41
 8000ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b09      	cmp	r3, #9
 8000ed6:	d91c      	bls.n	8000f12 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	68d9      	ldr	r1, [r3, #12]
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	3b1e      	subs	r3, #30
 8000eea:	2207      	movs	r2, #7
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	4019      	ands	r1, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6898      	ldr	r0, [r3, #8]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4613      	mov	r3, r2
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	4413      	add	r3, r2
 8000f02:	3b1e      	subs	r3, #30
 8000f04:	fa00 f203 	lsl.w	r2, r0, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	430a      	orrs	r2, r1
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	e019      	b.n	8000f46 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	6919      	ldr	r1, [r3, #16]
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4613      	mov	r3, r2
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	4413      	add	r3, r2
 8000f22:	2207      	movs	r2, #7
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	4019      	ands	r1, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	6898      	ldr	r0, [r3, #8]
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	4613      	mov	r3, r2
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	4413      	add	r3, r2
 8000f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	2b10      	cmp	r3, #16
 8000f4c:	d003      	beq.n	8000f56 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000f52:	2b11      	cmp	r3, #17
 8000f54:	d132      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d125      	bne.n	8000fac <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d126      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000f7c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	2b10      	cmp	r3, #16
 8000f84:	d11a      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f90:	0c9a      	lsrs	r2, r3, #18
 8000f92:	4613      	mov	r3, r2
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	4413      	add	r3, r2
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000f9c:	e002      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1f9      	bne.n	8000f9e <HAL_ADC_ConfigChannel+0x1b2>
 8000faa:	e007      	b.n	8000fbc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb0:	f043 0220 	orr.w	r2, r3, #32
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	40012400 	.word	0x40012400
 8000fd4:	20000000 	.word	0x20000000
 8000fd8:	431bde83 	.word	0x431bde83

08000fdc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d040      	beq.n	800107c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	689a      	ldr	r2, [r3, #8]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0201 	orr.w	r2, r2, #1
 8001008:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800100a:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <ADC_Enable+0xac>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a1f      	ldr	r2, [pc, #124]	; (800108c <ADC_Enable+0xb0>)
 8001010:	fba2 2303 	umull	r2, r3, r2, r3
 8001014:	0c9b      	lsrs	r3, r3, #18
 8001016:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001018:	e002      	b.n	8001020 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3b01      	subs	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f9      	bne.n	800101a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001026:	f7ff fceb 	bl	8000a00 <HAL_GetTick>
 800102a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800102c:	e01f      	b.n	800106e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800102e:	f7ff fce7 	bl	8000a00 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d918      	bls.n	800106e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689b      	ldr	r3, [r3, #8]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	2b01      	cmp	r3, #1
 8001048:	d011      	beq.n	800106e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104e:	f043 0210 	orr.w	r2, r3, #16
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105a:	f043 0201 	orr.w	r2, r3, #1
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e007      	b.n	800107e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b01      	cmp	r3, #1
 800107a:	d1d8      	bne.n	800102e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000000 	.word	0x20000000
 800108c:	431bde83 	.word	0x431bde83

08001090 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d12e      	bne.n	8001108 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f022 0201 	bic.w	r2, r2, #1
 80010b8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80010ba:	f7ff fca1 	bl	8000a00 <HAL_GetTick>
 80010be:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010c0:	e01b      	b.n	80010fa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80010c2:	f7ff fc9d 	bl	8000a00 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d914      	bls.n	80010fa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d10d      	bne.n	80010fa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	f043 0210 	orr.w	r2, r3, #16
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	f043 0201 	orr.w	r2, r3, #1
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e007      	b.n	800110a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	2b01      	cmp	r3, #1
 8001106:	d0dc      	beq.n	80010c2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001128:	2b00      	cmp	r3, #0
 800112a:	d127      	bne.n	800117c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001130:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001142:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001146:	d115      	bne.n	8001174 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800114c:	2b00      	cmp	r3, #0
 800114e:	d111      	bne.n	8001174 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001154:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001164:	2b00      	cmp	r3, #0
 8001166:	d105      	bne.n	8001174 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800116c:	f043 0201 	orr.w	r2, r3, #1
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001174:	68f8      	ldr	r0, [r7, #12]
 8001176:	f7ff f9a1 	bl	80004bc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800117a:	e004      	b.n	8001186 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6a1b      	ldr	r3, [r3, #32]
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	4798      	blx	r3
}
 8001186:	bf00      	nop
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800118e:	b580      	push	{r7, lr}
 8001190:	b084      	sub	sp, #16
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f7ff fe13 	bl	8000dc8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011a2:	bf00      	nop
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011c8:	f043 0204 	orr.w	r2, r3, #4
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f7ff fe02 	bl	8000dda <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e0ed      	b.n	80013cc <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff fa23 	bl	8000648 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f042 0201 	orr.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001212:	f7ff fbf5 	bl	8000a00 <HAL_GetTick>
 8001216:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001218:	e012      	b.n	8001240 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800121a:	f7ff fbf1 	bl	8000a00 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b0a      	cmp	r3, #10
 8001226:	d90b      	bls.n	8001240 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2205      	movs	r2, #5
 8001238:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0c5      	b.n	80013cc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0e5      	beq.n	800121a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0202 	bic.w	r2, r2, #2
 800125c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800125e:	f7ff fbcf 	bl	8000a00 <HAL_GetTick>
 8001262:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001264:	e012      	b.n	800128c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001266:	f7ff fbcb 	bl	8000a00 <HAL_GetTick>
 800126a:	4602      	mov	r2, r0
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	1ad3      	subs	r3, r2, r3
 8001270:	2b0a      	cmp	r3, #10
 8001272:	d90b      	bls.n	800128c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001278:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2205      	movs	r2, #5
 8001284:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e09f      	b.n	80013cc <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1e5      	bne.n	8001266 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	7e1b      	ldrb	r3, [r3, #24]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d108      	bne.n	80012b4 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	e007      	b.n	80012c4 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7e5b      	ldrb	r3, [r3, #25]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d108      	bne.n	80012de <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	e007      	b.n	80012ee <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	7e9b      	ldrb	r3, [r3, #26]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d108      	bne.n	8001308 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f042 0220 	orr.w	r2, r2, #32
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	e007      	b.n	8001318 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f022 0220 	bic.w	r2, r2, #32
 8001316:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	7edb      	ldrb	r3, [r3, #27]
 800131c:	2b01      	cmp	r3, #1
 800131e:	d108      	bne.n	8001332 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f022 0210 	bic.w	r2, r2, #16
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	e007      	b.n	8001342 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f042 0210 	orr.w	r2, r2, #16
 8001340:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	7f1b      	ldrb	r3, [r3, #28]
 8001346:	2b01      	cmp	r3, #1
 8001348:	d108      	bne.n	800135c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f042 0208 	orr.w	r2, r2, #8
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	e007      	b.n	800136c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0208 	bic.w	r2, r2, #8
 800136a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	7f5b      	ldrb	r3, [r3, #29]
 8001370:	2b01      	cmp	r3, #1
 8001372:	d108      	bne.n	8001386 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0204 	orr.w	r2, r2, #4
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e007      	b.n	8001396 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0204 	bic.w	r2, r2, #4
 8001394:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
 800139e:	431a      	orrs	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	ea42 0103 	orr.w	r1, r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	1e5a      	subs	r2, r3, #1
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013e4:	4b0c      	ldr	r3, [pc, #48]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ea:	68ba      	ldr	r2, [r7, #8]
 80013ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013f0:	4013      	ands	r3, r2
 80013f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001404:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001406:	4a04      	ldr	r2, [pc, #16]	; (8001418 <__NVIC_SetPriorityGrouping+0x44>)
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	60d3      	str	r3, [r2, #12]
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <__NVIC_GetPriorityGrouping+0x18>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	0a1b      	lsrs	r3, r3, #8
 8001426:	f003 0307 	and.w	r3, r3, #7
}
 800142a:	4618      	mov	r0, r3
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db0b      	blt.n	8001462 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f003 021f 	and.w	r2, r3, #31
 8001450:	4906      	ldr	r1, [pc, #24]	; (800146c <__NVIC_EnableIRQ+0x34>)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	095b      	lsrs	r3, r3, #5
 8001458:	2001      	movs	r0, #1
 800145a:	fa00 f202 	lsl.w	r2, r0, r2
 800145e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr
 800146c:	e000e100 	.word	0xe000e100

08001470 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	6039      	str	r1, [r7, #0]
 800147a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001480:	2b00      	cmp	r3, #0
 8001482:	db0a      	blt.n	800149a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	490c      	ldr	r1, [pc, #48]	; (80014bc <__NVIC_SetPriority+0x4c>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	0112      	lsls	r2, r2, #4
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	440b      	add	r3, r1
 8001494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001498:	e00a      	b.n	80014b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4908      	ldr	r1, [pc, #32]	; (80014c0 <__NVIC_SetPriority+0x50>)
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	3b04      	subs	r3, #4
 80014a8:	0112      	lsls	r2, r2, #4
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	440b      	add	r3, r1
 80014ae:	761a      	strb	r2, [r3, #24]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc80      	pop	{r7}
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	e000e100 	.word	0xe000e100
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b089      	sub	sp, #36	; 0x24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f1c3 0307 	rsb	r3, r3, #7
 80014de:	2b04      	cmp	r3, #4
 80014e0:	bf28      	it	cs
 80014e2:	2304      	movcs	r3, #4
 80014e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3304      	adds	r3, #4
 80014ea:	2b06      	cmp	r3, #6
 80014ec:	d902      	bls.n	80014f4 <NVIC_EncodePriority+0x30>
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	3b03      	subs	r3, #3
 80014f2:	e000      	b.n	80014f6 <NVIC_EncodePriority+0x32>
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f8:	f04f 32ff 	mov.w	r2, #4294967295
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	401a      	ands	r2, r3
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800150c:	f04f 31ff 	mov.w	r1, #4294967295
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	43d9      	mvns	r1, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800151c:	4313      	orrs	r3, r2
         );
}
 800151e:	4618      	mov	r0, r3
 8001520:	3724      	adds	r7, #36	; 0x24
 8001522:	46bd      	mov	sp, r7
 8001524:	bc80      	pop	{r7}
 8001526:	4770      	bx	lr

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff90 	bl	8001470 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff2d 	bl	80013d4 <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff42 	bl	800141c <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff90 	bl	80014c4 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5f 	bl	8001470 <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff35 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d101      	bne.n	8001606 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e043      	b.n	800168e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_DMA_Init+0xa8>)
 800160e:	4413      	add	r3, r2
 8001610:	4a22      	ldr	r2, [pc, #136]	; (800169c <HAL_DMA_Init+0xac>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	091b      	lsrs	r3, r3, #4
 8001618:	009a      	lsls	r2, r3, #2
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a1f      	ldr	r2, [pc, #124]	; (80016a0 <HAL_DMA_Init+0xb0>)
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2202      	movs	r2, #2
 8001628:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800163a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800163e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001668:	68fa      	ldr	r2, [r7, #12]
 800166a:	4313      	orrs	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	bc80      	pop	{r7}
 8001696:	4770      	bx	lr
 8001698:	bffdfff8 	.word	0xbffdfff8
 800169c:	cccccccd 	.word	0xcccccccd
 80016a0:	40020000 	.word	0x40020000

080016a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	607a      	str	r2, [r7, #4]
 80016b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b2:	2300      	movs	r3, #0
 80016b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d101      	bne.n	80016c4 <HAL_DMA_Start_IT+0x20>
 80016c0:	2302      	movs	r3, #2
 80016c2:	e04a      	b.n	800175a <HAL_DMA_Start_IT+0xb6>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d13a      	bne.n	800174c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	2202      	movs	r2, #2
 80016da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	2200      	movs	r2, #0
 80016e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	68b9      	ldr	r1, [r7, #8]
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 f938 	bl	8001970 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001704:	2b00      	cmp	r3, #0
 8001706:	d008      	beq.n	800171a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 020e 	orr.w	r2, r2, #14
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e00f      	b.n	800173a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0204 	bic.w	r2, r2, #4
 8001728:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 020a 	orr.w	r2, r2, #10
 8001738:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f042 0201 	orr.w	r2, r2, #1
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	e005      	b.n	8001758 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001754:	2302      	movs	r3, #2
 8001756:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001758:	7dfb      	ldrb	r3, [r7, #23]
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	2204      	movs	r2, #4
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d04f      	beq.n	800182c <HAL_DMA_IRQHandler+0xc8>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	2b00      	cmp	r3, #0
 8001794:	d04a      	beq.n	800182c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0320 	and.w	r3, r3, #32
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d107      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a66      	ldr	r2, [pc, #408]	; (8001954 <HAL_DMA_IRQHandler+0x1f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d029      	beq.n	8001812 <HAL_DMA_IRQHandler+0xae>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a65      	ldr	r2, [pc, #404]	; (8001958 <HAL_DMA_IRQHandler+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d022      	beq.n	800180e <HAL_DMA_IRQHandler+0xaa>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a63      	ldr	r2, [pc, #396]	; (800195c <HAL_DMA_IRQHandler+0x1f8>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d01a      	beq.n	8001808 <HAL_DMA_IRQHandler+0xa4>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a62      	ldr	r2, [pc, #392]	; (8001960 <HAL_DMA_IRQHandler+0x1fc>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d012      	beq.n	8001802 <HAL_DMA_IRQHandler+0x9e>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a60      	ldr	r2, [pc, #384]	; (8001964 <HAL_DMA_IRQHandler+0x200>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d00a      	beq.n	80017fc <HAL_DMA_IRQHandler+0x98>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a5f      	ldr	r2, [pc, #380]	; (8001968 <HAL_DMA_IRQHandler+0x204>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d102      	bne.n	80017f6 <HAL_DMA_IRQHandler+0x92>
 80017f0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f4:	e00e      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 80017f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80017fa:	e00b      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 80017fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001800:	e008      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001802:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001806:	e005      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800180c:	e002      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 800180e:	2340      	movs	r3, #64	; 0x40
 8001810:	e000      	b.n	8001814 <HAL_DMA_IRQHandler+0xb0>
 8001812:	2304      	movs	r3, #4
 8001814:	4a55      	ldr	r2, [pc, #340]	; (800196c <HAL_DMA_IRQHandler+0x208>)
 8001816:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8094 	beq.w	800194a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800182a:	e08e      	b.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	2202      	movs	r2, #2
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d056      	beq.n	80018ea <HAL_DMA_IRQHandler+0x186>
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d051      	beq.n	80018ea <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d10b      	bne.n	800186c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020a 	bic.w	r2, r2, #10
 8001862:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a38      	ldr	r2, [pc, #224]	; (8001954 <HAL_DMA_IRQHandler+0x1f0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d029      	beq.n	80018ca <HAL_DMA_IRQHandler+0x166>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a37      	ldr	r2, [pc, #220]	; (8001958 <HAL_DMA_IRQHandler+0x1f4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d022      	beq.n	80018c6 <HAL_DMA_IRQHandler+0x162>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a35      	ldr	r2, [pc, #212]	; (800195c <HAL_DMA_IRQHandler+0x1f8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d01a      	beq.n	80018c0 <HAL_DMA_IRQHandler+0x15c>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a34      	ldr	r2, [pc, #208]	; (8001960 <HAL_DMA_IRQHandler+0x1fc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d012      	beq.n	80018ba <HAL_DMA_IRQHandler+0x156>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a32      	ldr	r2, [pc, #200]	; (8001964 <HAL_DMA_IRQHandler+0x200>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d00a      	beq.n	80018b4 <HAL_DMA_IRQHandler+0x150>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a31      	ldr	r2, [pc, #196]	; (8001968 <HAL_DMA_IRQHandler+0x204>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d102      	bne.n	80018ae <HAL_DMA_IRQHandler+0x14a>
 80018a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80018ac:	e00e      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018b2:	e00b      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018b8:	e008      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018be:	e005      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018c4:	e002      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018c6:	2320      	movs	r3, #32
 80018c8:	e000      	b.n	80018cc <HAL_DMA_IRQHandler+0x168>
 80018ca:	2302      	movs	r3, #2
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_DMA_IRQHandler+0x208>)
 80018ce:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d034      	beq.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018e8:	e02f      	b.n	800194a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	2208      	movs	r2, #8
 80018f0:	409a      	lsls	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4013      	ands	r3, r2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d028      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	f003 0308 	and.w	r3, r3, #8
 8001900:	2b00      	cmp	r3, #0
 8001902:	d023      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191c:	2101      	movs	r1, #1
 800191e:	fa01 f202 	lsl.w	r2, r1, r2
 8001922:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
    }
  }
  return;
 800194a:	bf00      	nop
 800194c:	bf00      	nop
}
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40020008 	.word	0x40020008
 8001958:	4002001c 	.word	0x4002001c
 800195c:	40020030 	.word	0x40020030
 8001960:	40020044 	.word	0x40020044
 8001964:	40020058 	.word	0x40020058
 8001968:	4002006c 	.word	0x4002006c
 800196c:	40020000 	.word	0x40020000

08001970 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
 800197c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	2101      	movs	r1, #1
 8001988:	fa01 f202 	lsl.w	r2, r1, r2
 800198c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	683a      	ldr	r2, [r7, #0]
 8001994:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b10      	cmp	r3, #16
 800199c:	d108      	bne.n	80019b0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68ba      	ldr	r2, [r7, #8]
 80019ac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ae:	e007      	b.n	80019c0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68ba      	ldr	r2, [r7, #8]
 80019b6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	60da      	str	r2, [r3, #12]
}
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
	...

080019cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b08b      	sub	sp, #44	; 0x2c
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019d6:	2300      	movs	r3, #0
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e169      	b.n	8001cb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80019e0:	2201      	movs	r2, #1
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69fa      	ldr	r2, [r7, #28]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8158 	bne.w	8001cae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4a9a      	ldr	r2, [pc, #616]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d05e      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a08:	4a98      	ldr	r2, [pc, #608]	; (8001c6c <HAL_GPIO_Init+0x2a0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d875      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a0e:	4a98      	ldr	r2, [pc, #608]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d058      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a14:	4a96      	ldr	r2, [pc, #600]	; (8001c70 <HAL_GPIO_Init+0x2a4>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d86f      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a1a:	4a96      	ldr	r2, [pc, #600]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d052      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a20:	4a94      	ldr	r2, [pc, #592]	; (8001c74 <HAL_GPIO_Init+0x2a8>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d869      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a26:	4a94      	ldr	r2, [pc, #592]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d04c      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a2c:	4a92      	ldr	r2, [pc, #584]	; (8001c78 <HAL_GPIO_Init+0x2ac>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d863      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a32:	4a92      	ldr	r2, [pc, #584]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d046      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
 8001a38:	4a90      	ldr	r2, [pc, #576]	; (8001c7c <HAL_GPIO_Init+0x2b0>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d85d      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a3e:	2b12      	cmp	r3, #18
 8001a40:	d82a      	bhi.n	8001a98 <HAL_GPIO_Init+0xcc>
 8001a42:	2b12      	cmp	r3, #18
 8001a44:	d859      	bhi.n	8001afa <HAL_GPIO_Init+0x12e>
 8001a46:	a201      	add	r2, pc, #4	; (adr r2, 8001a4c <HAL_GPIO_Init+0x80>)
 8001a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a4c:	08001ac7 	.word	0x08001ac7
 8001a50:	08001aa1 	.word	0x08001aa1
 8001a54:	08001ab3 	.word	0x08001ab3
 8001a58:	08001af5 	.word	0x08001af5
 8001a5c:	08001afb 	.word	0x08001afb
 8001a60:	08001afb 	.word	0x08001afb
 8001a64:	08001afb 	.word	0x08001afb
 8001a68:	08001afb 	.word	0x08001afb
 8001a6c:	08001afb 	.word	0x08001afb
 8001a70:	08001afb 	.word	0x08001afb
 8001a74:	08001afb 	.word	0x08001afb
 8001a78:	08001afb 	.word	0x08001afb
 8001a7c:	08001afb 	.word	0x08001afb
 8001a80:	08001afb 	.word	0x08001afb
 8001a84:	08001afb 	.word	0x08001afb
 8001a88:	08001afb 	.word	0x08001afb
 8001a8c:	08001afb 	.word	0x08001afb
 8001a90:	08001aa9 	.word	0x08001aa9
 8001a94:	08001abd 	.word	0x08001abd
 8001a98:	4a79      	ldr	r2, [pc, #484]	; (8001c80 <HAL_GPIO_Init+0x2b4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d013      	beq.n	8001ac6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a9e:	e02c      	b.n	8001afa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	623b      	str	r3, [r7, #32]
          break;
 8001aa6:	e029      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	3304      	adds	r3, #4
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e024      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	68db      	ldr	r3, [r3, #12]
 8001ab6:	3308      	adds	r3, #8
 8001ab8:	623b      	str	r3, [r7, #32]
          break;
 8001aba:	e01f      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	330c      	adds	r3, #12
 8001ac2:	623b      	str	r3, [r7, #32]
          break;
 8001ac4:	e01a      	b.n	8001afc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d102      	bne.n	8001ad4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	623b      	str	r3, [r7, #32]
          break;
 8001ad2:	e013      	b.n	8001afc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001adc:	2308      	movs	r3, #8
 8001ade:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	611a      	str	r2, [r3, #16]
          break;
 8001ae6:	e009      	b.n	8001afc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ae8:	2308      	movs	r3, #8
 8001aea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	69fa      	ldr	r2, [r7, #28]
 8001af0:	615a      	str	r2, [r3, #20]
          break;
 8001af2:	e003      	b.n	8001afc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001af4:	2300      	movs	r3, #0
 8001af6:	623b      	str	r3, [r7, #32]
          break;
 8001af8:	e000      	b.n	8001afc <HAL_GPIO_Init+0x130>
          break;
 8001afa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	2bff      	cmp	r3, #255	; 0xff
 8001b00:	d801      	bhi.n	8001b06 <HAL_GPIO_Init+0x13a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	e001      	b.n	8001b0a <HAL_GPIO_Init+0x13e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	2bff      	cmp	r3, #255	; 0xff
 8001b10:	d802      	bhi.n	8001b18 <HAL_GPIO_Init+0x14c>
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	e002      	b.n	8001b1e <HAL_GPIO_Init+0x152>
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	3b08      	subs	r3, #8
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	210f      	movs	r1, #15
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	401a      	ands	r2, r3
 8001b30:	6a39      	ldr	r1, [r7, #32]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	fa01 f303 	lsl.w	r3, r1, r3
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80b1 	beq.w	8001cae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b4c:	4b4d      	ldr	r3, [pc, #308]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4a4c      	ldr	r2, [pc, #304]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b52:	f043 0301 	orr.w	r3, r3, #1
 8001b56:	6193      	str	r3, [r2, #24]
 8001b58:	4b4a      	ldr	r3, [pc, #296]	; (8001c84 <HAL_GPIO_Init+0x2b8>)
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	60bb      	str	r3, [r7, #8]
 8001b62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b64:	4a48      	ldr	r2, [pc, #288]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b68:	089b      	lsrs	r3, r3, #2
 8001b6a:	3302      	adds	r3, #2
 8001b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	220f      	movs	r2, #15
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a40      	ldr	r2, [pc, #256]	; (8001c8c <HAL_GPIO_Init+0x2c0>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d013      	beq.n	8001bb8 <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a3f      	ldr	r2, [pc, #252]	; (8001c90 <HAL_GPIO_Init+0x2c4>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d00d      	beq.n	8001bb4 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_GPIO_Init+0x2c8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d007      	beq.n	8001bb0 <HAL_GPIO_Init+0x1e4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a3d      	ldr	r2, [pc, #244]	; (8001c98 <HAL_GPIO_Init+0x2cc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d101      	bne.n	8001bac <HAL_GPIO_Init+0x1e0>
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1ee>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001bca:	492f      	ldr	r1, [pc, #188]	; (8001c88 <HAL_GPIO_Init+0x2bc>)
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d006      	beq.n	8001bf2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001be4:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	492c      	ldr	r1, [pc, #176]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	4928      	ldr	r1, [pc, #160]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d006      	beq.n	8001c1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c0c:	4b23      	ldr	r3, [pc, #140]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	4922      	ldr	r1, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
 8001c18:	e006      	b.n	8001c28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001c1a:	4b20      	ldr	r3, [pc, #128]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	43db      	mvns	r3, r3
 8001c22:	491e      	ldr	r1, [pc, #120]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c24:	4013      	ands	r3, r2
 8001c26:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d006      	beq.n	8001c42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001c34:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4918      	ldr	r1, [pc, #96]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	608b      	str	r3, [r1, #8]
 8001c40:	e006      	b.n	8001c50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001c42:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	4914      	ldr	r1, [pc, #80]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d021      	beq.n	8001ca0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c5c:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c5e:	68da      	ldr	r2, [r3, #12]
 8001c60:	490e      	ldr	r1, [pc, #56]	; (8001c9c <HAL_GPIO_Init+0x2d0>)
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	60cb      	str	r3, [r1, #12]
 8001c68:	e021      	b.n	8001cae <HAL_GPIO_Init+0x2e2>
 8001c6a:	bf00      	nop
 8001c6c:	10320000 	.word	0x10320000
 8001c70:	10310000 	.word	0x10310000
 8001c74:	10220000 	.word	0x10220000
 8001c78:	10210000 	.word	0x10210000
 8001c7c:	10120000 	.word	0x10120000
 8001c80:	10110000 	.word	0x10110000
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010000 	.word	0x40010000
 8001c8c:	40010800 	.word	0x40010800
 8001c90:	40010c00 	.word	0x40010c00
 8001c94:	40011000 	.word	0x40011000
 8001c98:	40011400 	.word	0x40011400
 8001c9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ca0:	4b0b      	ldr	r3, [pc, #44]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001ca2:	68da      	ldr	r2, [r3, #12]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4909      	ldr	r1, [pc, #36]	; (8001cd0 <HAL_GPIO_Init+0x304>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cba:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	f47f ae8e 	bne.w	80019e0 <HAL_GPIO_Init+0x14>
  }
}
 8001cc4:	bf00      	nop
 8001cc6:	bf00      	nop
 8001cc8:	372c      	adds	r7, #44	; 0x2c
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40010400 	.word	0x40010400

08001cd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	807b      	strh	r3, [r7, #2]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ce4:	787b      	ldrb	r3, [r7, #1]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d003      	beq.n	8001cf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cf0:	e003      	b.n	8001cfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cf2:	887b      	ldrh	r3, [r7, #2]
 8001cf4:	041a      	lsls	r2, r3, #16
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	041a      	lsls	r2, r3, #16
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	43d9      	mvns	r1, r3
 8001d22:	887b      	ldrh	r3, [r7, #2]
 8001d24:	400b      	ands	r3, r1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	611a      	str	r2, [r3, #16]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bc80      	pop	{r7}
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d101      	bne.n	8001d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e272      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f000 8087 	beq.w	8001e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d58:	4b92      	ldr	r3, [pc, #584]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b04      	cmp	r3, #4
 8001d62:	d00c      	beq.n	8001d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d64:	4b8f      	ldr	r3, [pc, #572]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f003 030c 	and.w	r3, r3, #12
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d112      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5e>
 8001d70:	4b8c      	ldr	r3, [pc, #560]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d7c:	d10b      	bne.n	8001d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d7e:	4b89      	ldr	r3, [pc, #548]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d06c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x12c>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d168      	bne.n	8001e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e24c      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d9e:	d106      	bne.n	8001dae <HAL_RCC_OscConfig+0x76>
 8001da0:	4b80      	ldr	r3, [pc, #512]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a7f      	ldr	r2, [pc, #508]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	e02e      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d10c      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x98>
 8001db6:	4b7b      	ldr	r3, [pc, #492]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a7a      	ldr	r2, [pc, #488]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	4b78      	ldr	r3, [pc, #480]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a77      	ldr	r2, [pc, #476]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	e01d      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0xbc>
 8001dda:	4b72      	ldr	r3, [pc, #456]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a71      	ldr	r2, [pc, #452]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001de4:	6013      	str	r3, [r2, #0]
 8001de6:	4b6f      	ldr	r3, [pc, #444]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a6e      	ldr	r2, [pc, #440]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001df0:	6013      	str	r3, [r2, #0]
 8001df2:	e00b      	b.n	8001e0c <HAL_RCC_OscConfig+0xd4>
 8001df4:	4b6b      	ldr	r3, [pc, #428]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a6a      	ldr	r2, [pc, #424]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dfe:	6013      	str	r3, [r2, #0]
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a67      	ldr	r2, [pc, #412]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d013      	beq.n	8001e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e14:	f7fe fdf4 	bl	8000a00 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e1c:	f7fe fdf0 	bl	8000a00 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b64      	cmp	r3, #100	; 0x64
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e200      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d0f0      	beq.n	8001e1c <HAL_RCC_OscConfig+0xe4>
 8001e3a:	e014      	b.n	8001e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3c:	f7fe fde0 	bl	8000a00 <HAL_GetTick>
 8001e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e42:	e008      	b.n	8001e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e44:	f7fe fddc 	bl	8000a00 <HAL_GetTick>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	2b64      	cmp	r3, #100	; 0x64
 8001e50:	d901      	bls.n	8001e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e52:	2303      	movs	r3, #3
 8001e54:	e1ec      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	4b53      	ldr	r3, [pc, #332]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f0      	bne.n	8001e44 <HAL_RCC_OscConfig+0x10c>
 8001e62:	e000      	b.n	8001e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d063      	beq.n	8001f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e72:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 030c 	and.w	r3, r3, #12
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00b      	beq.n	8001e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b08      	cmp	r3, #8
 8001e88:	d11c      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x18c>
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d116      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e96:	4b43      	ldr	r3, [pc, #268]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0302 	and.w	r3, r3, #2
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d005      	beq.n	8001eae <HAL_RCC_OscConfig+0x176>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e1c0      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eae:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	695b      	ldr	r3, [r3, #20]
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4939      	ldr	r1, [pc, #228]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	e03a      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d020      	beq.n	8001f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ecc:	4b36      	ldr	r3, [pc, #216]	; (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed2:	f7fe fd95 	bl	8000a00 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eda:	f7fe fd91 	bl	8000a00 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1a1      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0f0      	beq.n	8001eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	00db      	lsls	r3, r3, #3
 8001f06:	4927      	ldr	r1, [pc, #156]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
 8001f0c:	e015      	b.n	8001f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f0e:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <HAL_RCC_OscConfig+0x270>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7fe fd74 	bl	8000a00 <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f1c:	f7fe fd70 	bl	8000a00 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e180      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0308 	and.w	r3, r3, #8
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d03a      	beq.n	8001fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	699b      	ldr	r3, [r3, #24]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d019      	beq.n	8001f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <HAL_RCC_OscConfig+0x274>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7fe fd54 	bl	8000a00 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7fe fd50 	bl	8000a00 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e160      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f7a:	2001      	movs	r0, #1
 8001f7c:	f000 faa6 	bl	80024cc <RCC_Delay>
 8001f80:	e01c      	b.n	8001fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <HAL_RCC_OscConfig+0x274>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f88:	f7fe fd3a 	bl	8000a00 <HAL_GetTick>
 8001f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f8e:	e00f      	b.n	8001fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f90:	f7fe fd36 	bl	8000a00 <HAL_GetTick>
 8001f94:	4602      	mov	r2, r0
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	1ad3      	subs	r3, r2, r3
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d908      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f9e:	2303      	movs	r3, #3
 8001fa0:	e146      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	42420000 	.word	0x42420000
 8001fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b92      	ldr	r3, [pc, #584]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e9      	bne.n	8001f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a6 	beq.w	8002116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10d      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	4b88      	ldr	r3, [pc, #544]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a87      	ldr	r2, [pc, #540]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]
 8001fe6:	4b85      	ldr	r3, [pc, #532]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff6:	4b82      	ldr	r3, [pc, #520]	; (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d118      	bne.n	8002034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002002:	4b7f      	ldr	r3, [pc, #508]	; (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7e      	ldr	r2, [pc, #504]	; (8002200 <HAL_RCC_OscConfig+0x4c8>)
 8002008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800200e:	f7fe fcf7 	bl	8000a00 <HAL_GetTick>
 8002012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002014:	e008      	b.n	8002028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002016:	f7fe fcf3 	bl	8000a00 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	2b64      	cmp	r3, #100	; 0x64
 8002022:	d901      	bls.n	8002028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002024:	2303      	movs	r3, #3
 8002026:	e103      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002028:	4b75      	ldr	r3, [pc, #468]	; (8002200 <HAL_RCC_OscConfig+0x4c8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002030:	2b00      	cmp	r3, #0
 8002032:	d0f0      	beq.n	8002016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d106      	bne.n	800204a <HAL_RCC_OscConfig+0x312>
 800203c:	4b6f      	ldr	r3, [pc, #444]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	4a6e      	ldr	r2, [pc, #440]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002042:	f043 0301 	orr.w	r3, r3, #1
 8002046:	6213      	str	r3, [r2, #32]
 8002048:	e02d      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68db      	ldr	r3, [r3, #12]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RCC_OscConfig+0x334>
 8002052:	4b6a      	ldr	r3, [pc, #424]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	4a69      	ldr	r2, [pc, #420]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002058:	f023 0301 	bic.w	r3, r3, #1
 800205c:	6213      	str	r3, [r2, #32]
 800205e:	4b67      	ldr	r3, [pc, #412]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002060:	6a1b      	ldr	r3, [r3, #32]
 8002062:	4a66      	ldr	r2, [pc, #408]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f023 0304 	bic.w	r3, r3, #4
 8002068:	6213      	str	r3, [r2, #32]
 800206a:	e01c      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	2b05      	cmp	r3, #5
 8002072:	d10c      	bne.n	800208e <HAL_RCC_OscConfig+0x356>
 8002074:	4b61      	ldr	r3, [pc, #388]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	4a60      	ldr	r2, [pc, #384]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800207a:	f043 0304 	orr.w	r3, r3, #4
 800207e:	6213      	str	r3, [r2, #32]
 8002080:	4b5e      	ldr	r3, [pc, #376]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a5d      	ldr	r2, [pc, #372]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e00b      	b.n	80020a6 <HAL_RCC_OscConfig+0x36e>
 800208e:	4b5b      	ldr	r3, [pc, #364]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	4a5a      	ldr	r2, [pc, #360]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002094:	f023 0301 	bic.w	r3, r3, #1
 8002098:	6213      	str	r3, [r2, #32]
 800209a:	4b58      	ldr	r3, [pc, #352]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	4a57      	ldr	r2, [pc, #348]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	f023 0304 	bic.w	r3, r3, #4
 80020a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d015      	beq.n	80020da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe fca7 	bl	8000a00 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b4:	e00a      	b.n	80020cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b6:	f7fe fca3 	bl	8000a00 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d901      	bls.n	80020cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c8:	2303      	movs	r3, #3
 80020ca:	e0b1      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020cc:	4b4b      	ldr	r3, [pc, #300]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ee      	beq.n	80020b6 <HAL_RCC_OscConfig+0x37e>
 80020d8:	e014      	b.n	8002104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7fe fc91 	bl	8000a00 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e0:	e00a      	b.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e2:	f7fe fc8d 	bl	8000a00 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d901      	bls.n	80020f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020f4:	2303      	movs	r3, #3
 80020f6:	e09b      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1ee      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4b3c      	ldr	r3, [pc, #240]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	4a3b      	ldr	r2, [pc, #236]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 8087 	beq.w	800222e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002120:	4b36      	ldr	r3, [pc, #216]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 030c 	and.w	r3, r3, #12
 8002128:	2b08      	cmp	r3, #8
 800212a:	d061      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	69db      	ldr	r3, [r3, #28]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d146      	bne.n	80021c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002134:	4b33      	ldr	r3, [pc, #204]	; (8002204 <HAL_RCC_OscConfig+0x4cc>)
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7fe fc61 	bl	8000a00 <HAL_GetTick>
 800213e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7fe fc5d 	bl	8000a00 <HAL_GetTick>
 8002146:	4602      	mov	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e06d      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002154:	4b29      	ldr	r3, [pc, #164]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a1b      	ldr	r3, [r3, #32]
 8002164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002168:	d108      	bne.n	800217c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4921      	ldr	r1, [pc, #132]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800217c:	4b1f      	ldr	r3, [pc, #124]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a19      	ldr	r1, [r3, #32]
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218c:	430b      	orrs	r3, r1
 800218e:	491b      	ldr	r1, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 8002190:	4313      	orrs	r3, r2
 8002192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <HAL_RCC_OscConfig+0x4cc>)
 8002196:	2201      	movs	r2, #1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219a:	f7fe fc31 	bl	8000a00 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a2:	f7fe fc2d 	bl	8000a00 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e03d      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021b4:	4b11      	ldr	r3, [pc, #68]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x46a>
 80021c0:	e035      	b.n	800222e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c2:	4b10      	ldr	r3, [pc, #64]	; (8002204 <HAL_RCC_OscConfig+0x4cc>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fc1a 	bl	8000a00 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d0:	f7fe fc16 	bl	8000a00 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e026      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021e2:	4b06      	ldr	r3, [pc, #24]	; (80021fc <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d1f0      	bne.n	80021d0 <HAL_RCC_OscConfig+0x498>
 80021ee:	e01e      	b.n	800222e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d107      	bne.n	8002208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e019      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
 8002204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002208:	4b0b      	ldr	r3, [pc, #44]	; (8002238 <HAL_RCC_OscConfig+0x500>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	429a      	cmp	r2, r3
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0d0      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002250:	4b6a      	ldr	r3, [pc, #424]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d910      	bls.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b67      	ldr	r3, [pc, #412]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 0207 	bic.w	r2, r3, #7
 8002266:	4965      	ldr	r1, [pc, #404]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800226e:	4b63      	ldr	r3, [pc, #396]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0b8      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d020      	beq.n	80022ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002298:	4b59      	ldr	r3, [pc, #356]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	4a58      	ldr	r2, [pc, #352]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022b0:	4b53      	ldr	r3, [pc, #332]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	4a52      	ldr	r2, [pc, #328]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022bc:	4b50      	ldr	r3, [pc, #320]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	494d      	ldr	r1, [pc, #308]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0301 	and.w	r3, r3, #1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d040      	beq.n	800235c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022e2:	4b47      	ldr	r3, [pc, #284]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d115      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e07f      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b02      	cmp	r3, #2
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022fa:	4b41      	ldr	r3, [pc, #260]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d109      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e073      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800230a:	4b3d      	ldr	r3, [pc, #244]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d101      	bne.n	800231a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e06b      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b39      	ldr	r3, [pc, #228]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4936      	ldr	r1, [pc, #216]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800232c:	f7fe fb68 	bl	8000a00 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fb64 	bl	8000a00 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e053      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d210      	bcs.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800236a:	4b24      	ldr	r3, [pc, #144]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 0207 	bic.w	r2, r3, #7
 8002372:	4922      	ldr	r1, [pc, #136]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	4313      	orrs	r3, r2
 8002378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b20      	ldr	r3, [pc, #128]	; (80023fc <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e032      	b.n	80023f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	4916      	ldr	r1, [pc, #88]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0308 	and.w	r3, r3, #8
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d009      	beq.n	80023ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023b6:	4b12      	ldr	r3, [pc, #72]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023ca:	f000 f821 	bl	8002410 <HAL_RCC_GetSysClockFreq>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	490a      	ldr	r1, [pc, #40]	; (8002404 <HAL_RCC_ClockConfig+0x1c8>)
 80023dc:	5ccb      	ldrb	r3, [r1, r3]
 80023de:	fa22 f303 	lsr.w	r3, r2, r3
 80023e2:	4a09      	ldr	r2, [pc, #36]	; (8002408 <HAL_RCC_ClockConfig+0x1cc>)
 80023e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023e6:	4b09      	ldr	r3, [pc, #36]	; (800240c <HAL_RCC_ClockConfig+0x1d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fac6 	bl	800097c <HAL_InitTick>

  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40022000 	.word	0x40022000
 8002400:	40021000 	.word	0x40021000
 8002404:	08003634 	.word	0x08003634
 8002408:	20000000 	.word	0x20000000
 800240c:	20000004 	.word	0x20000004

08002410 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002410:	b490      	push	{r4, r7}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_RCC_GetSysClockFreq+0xac>)
 8002418:	1d3c      	adds	r4, r7, #4
 800241a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800241c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002420:	f240 2301 	movw	r3, #513	; 0x201
 8002424:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	2300      	movs	r3, #0
 800242c:	61bb      	str	r3, [r7, #24]
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	2300      	movs	r3, #0
 8002434:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800243a:	4b21      	ldr	r3, [pc, #132]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	2b04      	cmp	r3, #4
 8002448:	d002      	beq.n	8002450 <HAL_RCC_GetSysClockFreq+0x40>
 800244a:	2b08      	cmp	r3, #8
 800244c:	d003      	beq.n	8002456 <HAL_RCC_GetSysClockFreq+0x46>
 800244e:	e02b      	b.n	80024a8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002450:	4b1c      	ldr	r3, [pc, #112]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002452:	623b      	str	r3, [r7, #32]
      break;
 8002454:	e02b      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	0c9b      	lsrs	r3, r3, #18
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	3328      	adds	r3, #40	; 0x28
 8002460:	443b      	add	r3, r7
 8002462:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002466:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800246e:	2b00      	cmp	r3, #0
 8002470:	d012      	beq.n	8002498 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	0c5b      	lsrs	r3, r3, #17
 8002478:	f003 0301 	and.w	r3, r3, #1
 800247c:	3328      	adds	r3, #40	; 0x28
 800247e:	443b      	add	r3, r7
 8002480:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002484:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	4a0e      	ldr	r2, [pc, #56]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 800248a:	fb03 f202 	mul.w	r2, r3, r2
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	fbb2 f3f3 	udiv	r3, r2, r3
 8002494:	627b      	str	r3, [r7, #36]	; 0x24
 8002496:	e004      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249c:	fb02 f303 	mul.w	r3, r2, r3
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	623b      	str	r3, [r7, #32]
      break;
 80024a6:	e002      	b.n	80024ae <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a8:	4b06      	ldr	r3, [pc, #24]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024aa:	623b      	str	r3, [r7, #32]
      break;
 80024ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024ae:	6a3b      	ldr	r3, [r7, #32]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3728      	adds	r7, #40	; 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bc90      	pop	{r4, r7}
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	08003624 	.word	0x08003624
 80024c0:	40021000 	.word	0x40021000
 80024c4:	007a1200 	.word	0x007a1200
 80024c8:	003d0900 	.word	0x003d0900

080024cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <RCC_Delay+0x34>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	; (8002504 <RCC_Delay+0x38>)
 80024da:	fba2 2303 	umull	r2, r3, r2, r3
 80024de:	0a5b      	lsrs	r3, r3, #9
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	fb02 f303 	mul.w	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80024e8:	bf00      	nop
  }
  while (Delay --);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	60fa      	str	r2, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d1f9      	bne.n	80024e8 <RCC_Delay+0x1c>
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	20000000 	.word	0x20000000
 8002504:	10624dd3 	.word	0x10624dd3

08002508 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b086      	sub	sp, #24
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	613b      	str	r3, [r7, #16]
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d07d      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002524:	2300      	movs	r3, #0
 8002526:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002528:	4b4f      	ldr	r3, [pc, #316]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10d      	bne.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002534:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	4a4b      	ldr	r2, [pc, #300]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800253a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253e:	61d3      	str	r3, [r2, #28]
 8002540:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002548:	60bb      	str	r3, [r7, #8]
 800254a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800254c:	2301      	movs	r3, #1
 800254e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002558:	2b00      	cmp	r3, #0
 800255a:	d118      	bne.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800255c:	4b43      	ldr	r3, [pc, #268]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a42      	ldr	r2, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002566:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002568:	f7fe fa4a 	bl	8000a00 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256e:	e008      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002570:	f7fe fa46 	bl	8000a00 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b64      	cmp	r3, #100	; 0x64
 800257c:	d901      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e06d      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d0f0      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800258e:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002590:	6a1b      	ldr	r3, [r3, #32]
 8002592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002596:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d02e      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d027      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b6:	4b2e      	ldr	r3, [pc, #184]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025bc:	4b2c      	ldr	r3, [pc, #176]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025c2:	4a29      	ldr	r2, [pc, #164]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d014      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d2:	f7fe fa15 	bl	8000a00 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d8:	e00a      	b.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fa11 	bl	8000a00 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e036      	b.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f0:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025f2:	6a1b      	ldr	r3, [r3, #32]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0ee      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4917      	ldr	r1, [pc, #92]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	4313      	orrs	r3, r2
 800260c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d105      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002614:	4b14      	ldr	r3, [pc, #80]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4a13      	ldr	r2, [pc, #76]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800261e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	490b      	ldr	r1, [pc, #44]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	d008      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002658:	4313      	orrs	r3, r2
 800265a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3718      	adds	r7, #24
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	40007000 	.word	0x40007000
 8002670:	42420440 	.word	0x42420440

08002674 <__errno>:
 8002674:	4b01      	ldr	r3, [pc, #4]	; (800267c <__errno+0x8>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c

08002680 <__libc_init_array>:
 8002680:	b570      	push	{r4, r5, r6, lr}
 8002682:	2600      	movs	r6, #0
 8002684:	4d0c      	ldr	r5, [pc, #48]	; (80026b8 <__libc_init_array+0x38>)
 8002686:	4c0d      	ldr	r4, [pc, #52]	; (80026bc <__libc_init_array+0x3c>)
 8002688:	1b64      	subs	r4, r4, r5
 800268a:	10a4      	asrs	r4, r4, #2
 800268c:	42a6      	cmp	r6, r4
 800268e:	d109      	bne.n	80026a4 <__libc_init_array+0x24>
 8002690:	f000 ffb6 	bl	8003600 <_init>
 8002694:	2600      	movs	r6, #0
 8002696:	4d0a      	ldr	r5, [pc, #40]	; (80026c0 <__libc_init_array+0x40>)
 8002698:	4c0a      	ldr	r4, [pc, #40]	; (80026c4 <__libc_init_array+0x44>)
 800269a:	1b64      	subs	r4, r4, r5
 800269c:	10a4      	asrs	r4, r4, #2
 800269e:	42a6      	cmp	r6, r4
 80026a0:	d105      	bne.n	80026ae <__libc_init_array+0x2e>
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
 80026a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026a8:	4798      	blx	r3
 80026aa:	3601      	adds	r6, #1
 80026ac:	e7ee      	b.n	800268c <__libc_init_array+0xc>
 80026ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80026b2:	4798      	blx	r3
 80026b4:	3601      	adds	r6, #1
 80026b6:	e7f2      	b.n	800269e <__libc_init_array+0x1e>
 80026b8:	080036dc 	.word	0x080036dc
 80026bc:	080036dc 	.word	0x080036dc
 80026c0:	080036dc 	.word	0x080036dc
 80026c4:	080036e0 	.word	0x080036e0

080026c8 <memset>:
 80026c8:	4603      	mov	r3, r0
 80026ca:	4402      	add	r2, r0
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d100      	bne.n	80026d2 <memset+0xa>
 80026d0:	4770      	bx	lr
 80026d2:	f803 1b01 	strb.w	r1, [r3], #1
 80026d6:	e7f9      	b.n	80026cc <memset+0x4>

080026d8 <iprintf>:
 80026d8:	b40f      	push	{r0, r1, r2, r3}
 80026da:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <iprintf+0x2c>)
 80026dc:	b513      	push	{r0, r1, r4, lr}
 80026de:	681c      	ldr	r4, [r3, #0]
 80026e0:	b124      	cbz	r4, 80026ec <iprintf+0x14>
 80026e2:	69a3      	ldr	r3, [r4, #24]
 80026e4:	b913      	cbnz	r3, 80026ec <iprintf+0x14>
 80026e6:	4620      	mov	r0, r4
 80026e8:	f000 f866 	bl	80027b8 <__sinit>
 80026ec:	ab05      	add	r3, sp, #20
 80026ee:	4620      	mov	r0, r4
 80026f0:	9a04      	ldr	r2, [sp, #16]
 80026f2:	68a1      	ldr	r1, [r4, #8]
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	f000 f9bb 	bl	8002a70 <_vfiprintf_r>
 80026fa:	b002      	add	sp, #8
 80026fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002700:	b004      	add	sp, #16
 8002702:	4770      	bx	lr
 8002704:	2000000c 	.word	0x2000000c

08002708 <std>:
 8002708:	2300      	movs	r3, #0
 800270a:	b510      	push	{r4, lr}
 800270c:	4604      	mov	r4, r0
 800270e:	e9c0 3300 	strd	r3, r3, [r0]
 8002712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002716:	6083      	str	r3, [r0, #8]
 8002718:	8181      	strh	r1, [r0, #12]
 800271a:	6643      	str	r3, [r0, #100]	; 0x64
 800271c:	81c2      	strh	r2, [r0, #14]
 800271e:	6183      	str	r3, [r0, #24]
 8002720:	4619      	mov	r1, r3
 8002722:	2208      	movs	r2, #8
 8002724:	305c      	adds	r0, #92	; 0x5c
 8002726:	f7ff ffcf 	bl	80026c8 <memset>
 800272a:	4b05      	ldr	r3, [pc, #20]	; (8002740 <std+0x38>)
 800272c:	6224      	str	r4, [r4, #32]
 800272e:	6263      	str	r3, [r4, #36]	; 0x24
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <std+0x3c>)
 8002732:	62a3      	str	r3, [r4, #40]	; 0x28
 8002734:	4b04      	ldr	r3, [pc, #16]	; (8002748 <std+0x40>)
 8002736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <std+0x44>)
 800273a:	6323      	str	r3, [r4, #48]	; 0x30
 800273c:	bd10      	pop	{r4, pc}
 800273e:	bf00      	nop
 8002740:	0800301d 	.word	0x0800301d
 8002744:	0800303f 	.word	0x0800303f
 8002748:	08003077 	.word	0x08003077
 800274c:	0800309b 	.word	0x0800309b

08002750 <_cleanup_r>:
 8002750:	4901      	ldr	r1, [pc, #4]	; (8002758 <_cleanup_r+0x8>)
 8002752:	f000 b8af 	b.w	80028b4 <_fwalk_reent>
 8002756:	bf00      	nop
 8002758:	0800336d 	.word	0x0800336d

0800275c <__sfmoreglue>:
 800275c:	2268      	movs	r2, #104	; 0x68
 800275e:	b570      	push	{r4, r5, r6, lr}
 8002760:	1e4d      	subs	r5, r1, #1
 8002762:	4355      	muls	r5, r2
 8002764:	460e      	mov	r6, r1
 8002766:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800276a:	f000 f8e5 	bl	8002938 <_malloc_r>
 800276e:	4604      	mov	r4, r0
 8002770:	b140      	cbz	r0, 8002784 <__sfmoreglue+0x28>
 8002772:	2100      	movs	r1, #0
 8002774:	e9c0 1600 	strd	r1, r6, [r0]
 8002778:	300c      	adds	r0, #12
 800277a:	60a0      	str	r0, [r4, #8]
 800277c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002780:	f7ff ffa2 	bl	80026c8 <memset>
 8002784:	4620      	mov	r0, r4
 8002786:	bd70      	pop	{r4, r5, r6, pc}

08002788 <__sfp_lock_acquire>:
 8002788:	4801      	ldr	r0, [pc, #4]	; (8002790 <__sfp_lock_acquire+0x8>)
 800278a:	f000 b8b3 	b.w	80028f4 <__retarget_lock_acquire_recursive>
 800278e:	bf00      	nop
 8002790:	20000155 	.word	0x20000155

08002794 <__sfp_lock_release>:
 8002794:	4801      	ldr	r0, [pc, #4]	; (800279c <__sfp_lock_release+0x8>)
 8002796:	f000 b8ae 	b.w	80028f6 <__retarget_lock_release_recursive>
 800279a:	bf00      	nop
 800279c:	20000155 	.word	0x20000155

080027a0 <__sinit_lock_acquire>:
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <__sinit_lock_acquire+0x8>)
 80027a2:	f000 b8a7 	b.w	80028f4 <__retarget_lock_acquire_recursive>
 80027a6:	bf00      	nop
 80027a8:	20000156 	.word	0x20000156

080027ac <__sinit_lock_release>:
 80027ac:	4801      	ldr	r0, [pc, #4]	; (80027b4 <__sinit_lock_release+0x8>)
 80027ae:	f000 b8a2 	b.w	80028f6 <__retarget_lock_release_recursive>
 80027b2:	bf00      	nop
 80027b4:	20000156 	.word	0x20000156

080027b8 <__sinit>:
 80027b8:	b510      	push	{r4, lr}
 80027ba:	4604      	mov	r4, r0
 80027bc:	f7ff fff0 	bl	80027a0 <__sinit_lock_acquire>
 80027c0:	69a3      	ldr	r3, [r4, #24]
 80027c2:	b11b      	cbz	r3, 80027cc <__sinit+0x14>
 80027c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c8:	f7ff bff0 	b.w	80027ac <__sinit_lock_release>
 80027cc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80027d0:	6523      	str	r3, [r4, #80]	; 0x50
 80027d2:	4b13      	ldr	r3, [pc, #76]	; (8002820 <__sinit+0x68>)
 80027d4:	4a13      	ldr	r2, [pc, #76]	; (8002824 <__sinit+0x6c>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	62a2      	str	r2, [r4, #40]	; 0x28
 80027da:	42a3      	cmp	r3, r4
 80027dc:	bf08      	it	eq
 80027de:	2301      	moveq	r3, #1
 80027e0:	4620      	mov	r0, r4
 80027e2:	bf08      	it	eq
 80027e4:	61a3      	streq	r3, [r4, #24]
 80027e6:	f000 f81f 	bl	8002828 <__sfp>
 80027ea:	6060      	str	r0, [r4, #4]
 80027ec:	4620      	mov	r0, r4
 80027ee:	f000 f81b 	bl	8002828 <__sfp>
 80027f2:	60a0      	str	r0, [r4, #8]
 80027f4:	4620      	mov	r0, r4
 80027f6:	f000 f817 	bl	8002828 <__sfp>
 80027fa:	2200      	movs	r2, #0
 80027fc:	2104      	movs	r1, #4
 80027fe:	60e0      	str	r0, [r4, #12]
 8002800:	6860      	ldr	r0, [r4, #4]
 8002802:	f7ff ff81 	bl	8002708 <std>
 8002806:	2201      	movs	r2, #1
 8002808:	2109      	movs	r1, #9
 800280a:	68a0      	ldr	r0, [r4, #8]
 800280c:	f7ff ff7c 	bl	8002708 <std>
 8002810:	2202      	movs	r2, #2
 8002812:	2112      	movs	r1, #18
 8002814:	68e0      	ldr	r0, [r4, #12]
 8002816:	f7ff ff77 	bl	8002708 <std>
 800281a:	2301      	movs	r3, #1
 800281c:	61a3      	str	r3, [r4, #24]
 800281e:	e7d1      	b.n	80027c4 <__sinit+0xc>
 8002820:	08003644 	.word	0x08003644
 8002824:	08002751 	.word	0x08002751

08002828 <__sfp>:
 8002828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282a:	4607      	mov	r7, r0
 800282c:	f7ff ffac 	bl	8002788 <__sfp_lock_acquire>
 8002830:	4b1e      	ldr	r3, [pc, #120]	; (80028ac <__sfp+0x84>)
 8002832:	681e      	ldr	r6, [r3, #0]
 8002834:	69b3      	ldr	r3, [r6, #24]
 8002836:	b913      	cbnz	r3, 800283e <__sfp+0x16>
 8002838:	4630      	mov	r0, r6
 800283a:	f7ff ffbd 	bl	80027b8 <__sinit>
 800283e:	3648      	adds	r6, #72	; 0x48
 8002840:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002844:	3b01      	subs	r3, #1
 8002846:	d503      	bpl.n	8002850 <__sfp+0x28>
 8002848:	6833      	ldr	r3, [r6, #0]
 800284a:	b30b      	cbz	r3, 8002890 <__sfp+0x68>
 800284c:	6836      	ldr	r6, [r6, #0]
 800284e:	e7f7      	b.n	8002840 <__sfp+0x18>
 8002850:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002854:	b9d5      	cbnz	r5, 800288c <__sfp+0x64>
 8002856:	4b16      	ldr	r3, [pc, #88]	; (80028b0 <__sfp+0x88>)
 8002858:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800285c:	60e3      	str	r3, [r4, #12]
 800285e:	6665      	str	r5, [r4, #100]	; 0x64
 8002860:	f000 f847 	bl	80028f2 <__retarget_lock_init_recursive>
 8002864:	f7ff ff96 	bl	8002794 <__sfp_lock_release>
 8002868:	2208      	movs	r2, #8
 800286a:	4629      	mov	r1, r5
 800286c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002870:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002874:	6025      	str	r5, [r4, #0]
 8002876:	61a5      	str	r5, [r4, #24]
 8002878:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800287c:	f7ff ff24 	bl	80026c8 <memset>
 8002880:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002884:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002888:	4620      	mov	r0, r4
 800288a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800288c:	3468      	adds	r4, #104	; 0x68
 800288e:	e7d9      	b.n	8002844 <__sfp+0x1c>
 8002890:	2104      	movs	r1, #4
 8002892:	4638      	mov	r0, r7
 8002894:	f7ff ff62 	bl	800275c <__sfmoreglue>
 8002898:	4604      	mov	r4, r0
 800289a:	6030      	str	r0, [r6, #0]
 800289c:	2800      	cmp	r0, #0
 800289e:	d1d5      	bne.n	800284c <__sfp+0x24>
 80028a0:	f7ff ff78 	bl	8002794 <__sfp_lock_release>
 80028a4:	230c      	movs	r3, #12
 80028a6:	603b      	str	r3, [r7, #0]
 80028a8:	e7ee      	b.n	8002888 <__sfp+0x60>
 80028aa:	bf00      	nop
 80028ac:	08003644 	.word	0x08003644
 80028b0:	ffff0001 	.word	0xffff0001

080028b4 <_fwalk_reent>:
 80028b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028b8:	4606      	mov	r6, r0
 80028ba:	4688      	mov	r8, r1
 80028bc:	2700      	movs	r7, #0
 80028be:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80028c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80028c6:	f1b9 0901 	subs.w	r9, r9, #1
 80028ca:	d505      	bpl.n	80028d8 <_fwalk_reent+0x24>
 80028cc:	6824      	ldr	r4, [r4, #0]
 80028ce:	2c00      	cmp	r4, #0
 80028d0:	d1f7      	bne.n	80028c2 <_fwalk_reent+0xe>
 80028d2:	4638      	mov	r0, r7
 80028d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80028d8:	89ab      	ldrh	r3, [r5, #12]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d907      	bls.n	80028ee <_fwalk_reent+0x3a>
 80028de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80028e2:	3301      	adds	r3, #1
 80028e4:	d003      	beq.n	80028ee <_fwalk_reent+0x3a>
 80028e6:	4629      	mov	r1, r5
 80028e8:	4630      	mov	r0, r6
 80028ea:	47c0      	blx	r8
 80028ec:	4307      	orrs	r7, r0
 80028ee:	3568      	adds	r5, #104	; 0x68
 80028f0:	e7e9      	b.n	80028c6 <_fwalk_reent+0x12>

080028f2 <__retarget_lock_init_recursive>:
 80028f2:	4770      	bx	lr

080028f4 <__retarget_lock_acquire_recursive>:
 80028f4:	4770      	bx	lr

080028f6 <__retarget_lock_release_recursive>:
 80028f6:	4770      	bx	lr

080028f8 <sbrk_aligned>:
 80028f8:	b570      	push	{r4, r5, r6, lr}
 80028fa:	4e0e      	ldr	r6, [pc, #56]	; (8002934 <sbrk_aligned+0x3c>)
 80028fc:	460c      	mov	r4, r1
 80028fe:	6831      	ldr	r1, [r6, #0]
 8002900:	4605      	mov	r5, r0
 8002902:	b911      	cbnz	r1, 800290a <sbrk_aligned+0x12>
 8002904:	f000 fb7a 	bl	8002ffc <_sbrk_r>
 8002908:	6030      	str	r0, [r6, #0]
 800290a:	4621      	mov	r1, r4
 800290c:	4628      	mov	r0, r5
 800290e:	f000 fb75 	bl	8002ffc <_sbrk_r>
 8002912:	1c43      	adds	r3, r0, #1
 8002914:	d00a      	beq.n	800292c <sbrk_aligned+0x34>
 8002916:	1cc4      	adds	r4, r0, #3
 8002918:	f024 0403 	bic.w	r4, r4, #3
 800291c:	42a0      	cmp	r0, r4
 800291e:	d007      	beq.n	8002930 <sbrk_aligned+0x38>
 8002920:	1a21      	subs	r1, r4, r0
 8002922:	4628      	mov	r0, r5
 8002924:	f000 fb6a 	bl	8002ffc <_sbrk_r>
 8002928:	3001      	adds	r0, #1
 800292a:	d101      	bne.n	8002930 <sbrk_aligned+0x38>
 800292c:	f04f 34ff 	mov.w	r4, #4294967295
 8002930:	4620      	mov	r0, r4
 8002932:	bd70      	pop	{r4, r5, r6, pc}
 8002934:	2000015c 	.word	0x2000015c

08002938 <_malloc_r>:
 8002938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800293c:	1ccd      	adds	r5, r1, #3
 800293e:	f025 0503 	bic.w	r5, r5, #3
 8002942:	3508      	adds	r5, #8
 8002944:	2d0c      	cmp	r5, #12
 8002946:	bf38      	it	cc
 8002948:	250c      	movcc	r5, #12
 800294a:	2d00      	cmp	r5, #0
 800294c:	4607      	mov	r7, r0
 800294e:	db01      	blt.n	8002954 <_malloc_r+0x1c>
 8002950:	42a9      	cmp	r1, r5
 8002952:	d905      	bls.n	8002960 <_malloc_r+0x28>
 8002954:	230c      	movs	r3, #12
 8002956:	2600      	movs	r6, #0
 8002958:	603b      	str	r3, [r7, #0]
 800295a:	4630      	mov	r0, r6
 800295c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002960:	4e2e      	ldr	r6, [pc, #184]	; (8002a1c <_malloc_r+0xe4>)
 8002962:	f000 fdc5 	bl	80034f0 <__malloc_lock>
 8002966:	6833      	ldr	r3, [r6, #0]
 8002968:	461c      	mov	r4, r3
 800296a:	bb34      	cbnz	r4, 80029ba <_malloc_r+0x82>
 800296c:	4629      	mov	r1, r5
 800296e:	4638      	mov	r0, r7
 8002970:	f7ff ffc2 	bl	80028f8 <sbrk_aligned>
 8002974:	1c43      	adds	r3, r0, #1
 8002976:	4604      	mov	r4, r0
 8002978:	d14d      	bne.n	8002a16 <_malloc_r+0xde>
 800297a:	6834      	ldr	r4, [r6, #0]
 800297c:	4626      	mov	r6, r4
 800297e:	2e00      	cmp	r6, #0
 8002980:	d140      	bne.n	8002a04 <_malloc_r+0xcc>
 8002982:	6823      	ldr	r3, [r4, #0]
 8002984:	4631      	mov	r1, r6
 8002986:	4638      	mov	r0, r7
 8002988:	eb04 0803 	add.w	r8, r4, r3
 800298c:	f000 fb36 	bl	8002ffc <_sbrk_r>
 8002990:	4580      	cmp	r8, r0
 8002992:	d13a      	bne.n	8002a0a <_malloc_r+0xd2>
 8002994:	6821      	ldr	r1, [r4, #0]
 8002996:	3503      	adds	r5, #3
 8002998:	1a6d      	subs	r5, r5, r1
 800299a:	f025 0503 	bic.w	r5, r5, #3
 800299e:	3508      	adds	r5, #8
 80029a0:	2d0c      	cmp	r5, #12
 80029a2:	bf38      	it	cc
 80029a4:	250c      	movcc	r5, #12
 80029a6:	4638      	mov	r0, r7
 80029a8:	4629      	mov	r1, r5
 80029aa:	f7ff ffa5 	bl	80028f8 <sbrk_aligned>
 80029ae:	3001      	adds	r0, #1
 80029b0:	d02b      	beq.n	8002a0a <_malloc_r+0xd2>
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	442b      	add	r3, r5
 80029b6:	6023      	str	r3, [r4, #0]
 80029b8:	e00e      	b.n	80029d8 <_malloc_r+0xa0>
 80029ba:	6822      	ldr	r2, [r4, #0]
 80029bc:	1b52      	subs	r2, r2, r5
 80029be:	d41e      	bmi.n	80029fe <_malloc_r+0xc6>
 80029c0:	2a0b      	cmp	r2, #11
 80029c2:	d916      	bls.n	80029f2 <_malloc_r+0xba>
 80029c4:	1961      	adds	r1, r4, r5
 80029c6:	42a3      	cmp	r3, r4
 80029c8:	6025      	str	r5, [r4, #0]
 80029ca:	bf18      	it	ne
 80029cc:	6059      	strne	r1, [r3, #4]
 80029ce:	6863      	ldr	r3, [r4, #4]
 80029d0:	bf08      	it	eq
 80029d2:	6031      	streq	r1, [r6, #0]
 80029d4:	5162      	str	r2, [r4, r5]
 80029d6:	604b      	str	r3, [r1, #4]
 80029d8:	4638      	mov	r0, r7
 80029da:	f104 060b 	add.w	r6, r4, #11
 80029de:	f000 fd8d 	bl	80034fc <__malloc_unlock>
 80029e2:	f026 0607 	bic.w	r6, r6, #7
 80029e6:	1d23      	adds	r3, r4, #4
 80029e8:	1af2      	subs	r2, r6, r3
 80029ea:	d0b6      	beq.n	800295a <_malloc_r+0x22>
 80029ec:	1b9b      	subs	r3, r3, r6
 80029ee:	50a3      	str	r3, [r4, r2]
 80029f0:	e7b3      	b.n	800295a <_malloc_r+0x22>
 80029f2:	6862      	ldr	r2, [r4, #4]
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	bf0c      	ite	eq
 80029f8:	6032      	streq	r2, [r6, #0]
 80029fa:	605a      	strne	r2, [r3, #4]
 80029fc:	e7ec      	b.n	80029d8 <_malloc_r+0xa0>
 80029fe:	4623      	mov	r3, r4
 8002a00:	6864      	ldr	r4, [r4, #4]
 8002a02:	e7b2      	b.n	800296a <_malloc_r+0x32>
 8002a04:	4634      	mov	r4, r6
 8002a06:	6876      	ldr	r6, [r6, #4]
 8002a08:	e7b9      	b.n	800297e <_malloc_r+0x46>
 8002a0a:	230c      	movs	r3, #12
 8002a0c:	4638      	mov	r0, r7
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	f000 fd74 	bl	80034fc <__malloc_unlock>
 8002a14:	e7a1      	b.n	800295a <_malloc_r+0x22>
 8002a16:	6025      	str	r5, [r4, #0]
 8002a18:	e7de      	b.n	80029d8 <_malloc_r+0xa0>
 8002a1a:	bf00      	nop
 8002a1c:	20000158 	.word	0x20000158

08002a20 <__sfputc_r>:
 8002a20:	6893      	ldr	r3, [r2, #8]
 8002a22:	b410      	push	{r4}
 8002a24:	3b01      	subs	r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	6093      	str	r3, [r2, #8]
 8002a2a:	da07      	bge.n	8002a3c <__sfputc_r+0x1c>
 8002a2c:	6994      	ldr	r4, [r2, #24]
 8002a2e:	42a3      	cmp	r3, r4
 8002a30:	db01      	blt.n	8002a36 <__sfputc_r+0x16>
 8002a32:	290a      	cmp	r1, #10
 8002a34:	d102      	bne.n	8002a3c <__sfputc_r+0x1c>
 8002a36:	bc10      	pop	{r4}
 8002a38:	f000 bb34 	b.w	80030a4 <__swbuf_r>
 8002a3c:	6813      	ldr	r3, [r2, #0]
 8002a3e:	1c58      	adds	r0, r3, #1
 8002a40:	6010      	str	r0, [r2, #0]
 8002a42:	7019      	strb	r1, [r3, #0]
 8002a44:	4608      	mov	r0, r1
 8002a46:	bc10      	pop	{r4}
 8002a48:	4770      	bx	lr

08002a4a <__sfputs_r>:
 8002a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4c:	4606      	mov	r6, r0
 8002a4e:	460f      	mov	r7, r1
 8002a50:	4614      	mov	r4, r2
 8002a52:	18d5      	adds	r5, r2, r3
 8002a54:	42ac      	cmp	r4, r5
 8002a56:	d101      	bne.n	8002a5c <__sfputs_r+0x12>
 8002a58:	2000      	movs	r0, #0
 8002a5a:	e007      	b.n	8002a6c <__sfputs_r+0x22>
 8002a5c:	463a      	mov	r2, r7
 8002a5e:	4630      	mov	r0, r6
 8002a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a64:	f7ff ffdc 	bl	8002a20 <__sfputc_r>
 8002a68:	1c43      	adds	r3, r0, #1
 8002a6a:	d1f3      	bne.n	8002a54 <__sfputs_r+0xa>
 8002a6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a70 <_vfiprintf_r>:
 8002a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a74:	460d      	mov	r5, r1
 8002a76:	4614      	mov	r4, r2
 8002a78:	4698      	mov	r8, r3
 8002a7a:	4606      	mov	r6, r0
 8002a7c:	b09d      	sub	sp, #116	; 0x74
 8002a7e:	b118      	cbz	r0, 8002a88 <_vfiprintf_r+0x18>
 8002a80:	6983      	ldr	r3, [r0, #24]
 8002a82:	b90b      	cbnz	r3, 8002a88 <_vfiprintf_r+0x18>
 8002a84:	f7ff fe98 	bl	80027b8 <__sinit>
 8002a88:	4b89      	ldr	r3, [pc, #548]	; (8002cb0 <_vfiprintf_r+0x240>)
 8002a8a:	429d      	cmp	r5, r3
 8002a8c:	d11b      	bne.n	8002ac6 <_vfiprintf_r+0x56>
 8002a8e:	6875      	ldr	r5, [r6, #4]
 8002a90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002a92:	07d9      	lsls	r1, r3, #31
 8002a94:	d405      	bmi.n	8002aa2 <_vfiprintf_r+0x32>
 8002a96:	89ab      	ldrh	r3, [r5, #12]
 8002a98:	059a      	lsls	r2, r3, #22
 8002a9a:	d402      	bmi.n	8002aa2 <_vfiprintf_r+0x32>
 8002a9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002a9e:	f7ff ff29 	bl	80028f4 <__retarget_lock_acquire_recursive>
 8002aa2:	89ab      	ldrh	r3, [r5, #12]
 8002aa4:	071b      	lsls	r3, r3, #28
 8002aa6:	d501      	bpl.n	8002aac <_vfiprintf_r+0x3c>
 8002aa8:	692b      	ldr	r3, [r5, #16]
 8002aaa:	b9eb      	cbnz	r3, 8002ae8 <_vfiprintf_r+0x78>
 8002aac:	4629      	mov	r1, r5
 8002aae:	4630      	mov	r0, r6
 8002ab0:	f000 fb5c 	bl	800316c <__swsetup_r>
 8002ab4:	b1c0      	cbz	r0, 8002ae8 <_vfiprintf_r+0x78>
 8002ab6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002ab8:	07dc      	lsls	r4, r3, #31
 8002aba:	d50e      	bpl.n	8002ada <_vfiprintf_r+0x6a>
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	b01d      	add	sp, #116	; 0x74
 8002ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ac6:	4b7b      	ldr	r3, [pc, #492]	; (8002cb4 <_vfiprintf_r+0x244>)
 8002ac8:	429d      	cmp	r5, r3
 8002aca:	d101      	bne.n	8002ad0 <_vfiprintf_r+0x60>
 8002acc:	68b5      	ldr	r5, [r6, #8]
 8002ace:	e7df      	b.n	8002a90 <_vfiprintf_r+0x20>
 8002ad0:	4b79      	ldr	r3, [pc, #484]	; (8002cb8 <_vfiprintf_r+0x248>)
 8002ad2:	429d      	cmp	r5, r3
 8002ad4:	bf08      	it	eq
 8002ad6:	68f5      	ldreq	r5, [r6, #12]
 8002ad8:	e7da      	b.n	8002a90 <_vfiprintf_r+0x20>
 8002ada:	89ab      	ldrh	r3, [r5, #12]
 8002adc:	0598      	lsls	r0, r3, #22
 8002ade:	d4ed      	bmi.n	8002abc <_vfiprintf_r+0x4c>
 8002ae0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002ae2:	f7ff ff08 	bl	80028f6 <__retarget_lock_release_recursive>
 8002ae6:	e7e9      	b.n	8002abc <_vfiprintf_r+0x4c>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9309      	str	r3, [sp, #36]	; 0x24
 8002aec:	2320      	movs	r3, #32
 8002aee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002af2:	2330      	movs	r3, #48	; 0x30
 8002af4:	f04f 0901 	mov.w	r9, #1
 8002af8:	f8cd 800c 	str.w	r8, [sp, #12]
 8002afc:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8002cbc <_vfiprintf_r+0x24c>
 8002b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002b04:	4623      	mov	r3, r4
 8002b06:	469a      	mov	sl, r3
 8002b08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002b0c:	b10a      	cbz	r2, 8002b12 <_vfiprintf_r+0xa2>
 8002b0e:	2a25      	cmp	r2, #37	; 0x25
 8002b10:	d1f9      	bne.n	8002b06 <_vfiprintf_r+0x96>
 8002b12:	ebba 0b04 	subs.w	fp, sl, r4
 8002b16:	d00b      	beq.n	8002b30 <_vfiprintf_r+0xc0>
 8002b18:	465b      	mov	r3, fp
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	4629      	mov	r1, r5
 8002b1e:	4630      	mov	r0, r6
 8002b20:	f7ff ff93 	bl	8002a4a <__sfputs_r>
 8002b24:	3001      	adds	r0, #1
 8002b26:	f000 80aa 	beq.w	8002c7e <_vfiprintf_r+0x20e>
 8002b2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002b2c:	445a      	add	r2, fp
 8002b2e:	9209      	str	r2, [sp, #36]	; 0x24
 8002b30:	f89a 3000 	ldrb.w	r3, [sl]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 80a2 	beq.w	8002c7e <_vfiprintf_r+0x20e>
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002b44:	f10a 0a01 	add.w	sl, sl, #1
 8002b48:	9304      	str	r3, [sp, #16]
 8002b4a:	9307      	str	r3, [sp, #28]
 8002b4c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002b50:	931a      	str	r3, [sp, #104]	; 0x68
 8002b52:	4654      	mov	r4, sl
 8002b54:	2205      	movs	r2, #5
 8002b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b5a:	4858      	ldr	r0, [pc, #352]	; (8002cbc <_vfiprintf_r+0x24c>)
 8002b5c:	f000 fcba 	bl	80034d4 <memchr>
 8002b60:	9a04      	ldr	r2, [sp, #16]
 8002b62:	b9d8      	cbnz	r0, 8002b9c <_vfiprintf_r+0x12c>
 8002b64:	06d1      	lsls	r1, r2, #27
 8002b66:	bf44      	itt	mi
 8002b68:	2320      	movmi	r3, #32
 8002b6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b6e:	0713      	lsls	r3, r2, #28
 8002b70:	bf44      	itt	mi
 8002b72:	232b      	movmi	r3, #43	; 0x2b
 8002b74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002b78:	f89a 3000 	ldrb.w	r3, [sl]
 8002b7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002b7e:	d015      	beq.n	8002bac <_vfiprintf_r+0x13c>
 8002b80:	4654      	mov	r4, sl
 8002b82:	2000      	movs	r0, #0
 8002b84:	f04f 0c0a 	mov.w	ip, #10
 8002b88:	9a07      	ldr	r2, [sp, #28]
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b90:	3b30      	subs	r3, #48	; 0x30
 8002b92:	2b09      	cmp	r3, #9
 8002b94:	d94e      	bls.n	8002c34 <_vfiprintf_r+0x1c4>
 8002b96:	b1b0      	cbz	r0, 8002bc6 <_vfiprintf_r+0x156>
 8002b98:	9207      	str	r2, [sp, #28]
 8002b9a:	e014      	b.n	8002bc6 <_vfiprintf_r+0x156>
 8002b9c:	eba0 0308 	sub.w	r3, r0, r8
 8002ba0:	fa09 f303 	lsl.w	r3, r9, r3
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	46a2      	mov	sl, r4
 8002ba8:	9304      	str	r3, [sp, #16]
 8002baa:	e7d2      	b.n	8002b52 <_vfiprintf_r+0xe2>
 8002bac:	9b03      	ldr	r3, [sp, #12]
 8002bae:	1d19      	adds	r1, r3, #4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	9103      	str	r1, [sp, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	bfbb      	ittet	lt
 8002bb8:	425b      	neglt	r3, r3
 8002bba:	f042 0202 	orrlt.w	r2, r2, #2
 8002bbe:	9307      	strge	r3, [sp, #28]
 8002bc0:	9307      	strlt	r3, [sp, #28]
 8002bc2:	bfb8      	it	lt
 8002bc4:	9204      	strlt	r2, [sp, #16]
 8002bc6:	7823      	ldrb	r3, [r4, #0]
 8002bc8:	2b2e      	cmp	r3, #46	; 0x2e
 8002bca:	d10c      	bne.n	8002be6 <_vfiprintf_r+0x176>
 8002bcc:	7863      	ldrb	r3, [r4, #1]
 8002bce:	2b2a      	cmp	r3, #42	; 0x2a
 8002bd0:	d135      	bne.n	8002c3e <_vfiprintf_r+0x1ce>
 8002bd2:	9b03      	ldr	r3, [sp, #12]
 8002bd4:	3402      	adds	r4, #2
 8002bd6:	1d1a      	adds	r2, r3, #4
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	9203      	str	r2, [sp, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	bfb8      	it	lt
 8002be0:	f04f 33ff 	movlt.w	r3, #4294967295
 8002be4:	9305      	str	r3, [sp, #20]
 8002be6:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8002cc0 <_vfiprintf_r+0x250>
 8002bea:	2203      	movs	r2, #3
 8002bec:	4650      	mov	r0, sl
 8002bee:	7821      	ldrb	r1, [r4, #0]
 8002bf0:	f000 fc70 	bl	80034d4 <memchr>
 8002bf4:	b140      	cbz	r0, 8002c08 <_vfiprintf_r+0x198>
 8002bf6:	2340      	movs	r3, #64	; 0x40
 8002bf8:	eba0 000a 	sub.w	r0, r0, sl
 8002bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8002c00:	9b04      	ldr	r3, [sp, #16]
 8002c02:	3401      	adds	r4, #1
 8002c04:	4303      	orrs	r3, r0
 8002c06:	9304      	str	r3, [sp, #16]
 8002c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c0c:	2206      	movs	r2, #6
 8002c0e:	482d      	ldr	r0, [pc, #180]	; (8002cc4 <_vfiprintf_r+0x254>)
 8002c10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002c14:	f000 fc5e 	bl	80034d4 <memchr>
 8002c18:	2800      	cmp	r0, #0
 8002c1a:	d03f      	beq.n	8002c9c <_vfiprintf_r+0x22c>
 8002c1c:	4b2a      	ldr	r3, [pc, #168]	; (8002cc8 <_vfiprintf_r+0x258>)
 8002c1e:	bb1b      	cbnz	r3, 8002c68 <_vfiprintf_r+0x1f8>
 8002c20:	9b03      	ldr	r3, [sp, #12]
 8002c22:	3307      	adds	r3, #7
 8002c24:	f023 0307 	bic.w	r3, r3, #7
 8002c28:	3308      	adds	r3, #8
 8002c2a:	9303      	str	r3, [sp, #12]
 8002c2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c2e:	443b      	add	r3, r7
 8002c30:	9309      	str	r3, [sp, #36]	; 0x24
 8002c32:	e767      	b.n	8002b04 <_vfiprintf_r+0x94>
 8002c34:	460c      	mov	r4, r1
 8002c36:	2001      	movs	r0, #1
 8002c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8002c3c:	e7a5      	b.n	8002b8a <_vfiprintf_r+0x11a>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	f04f 0c0a 	mov.w	ip, #10
 8002c44:	4619      	mov	r1, r3
 8002c46:	3401      	adds	r4, #1
 8002c48:	9305      	str	r3, [sp, #20]
 8002c4a:	4620      	mov	r0, r4
 8002c4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c50:	3a30      	subs	r2, #48	; 0x30
 8002c52:	2a09      	cmp	r2, #9
 8002c54:	d903      	bls.n	8002c5e <_vfiprintf_r+0x1ee>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d0c5      	beq.n	8002be6 <_vfiprintf_r+0x176>
 8002c5a:	9105      	str	r1, [sp, #20]
 8002c5c:	e7c3      	b.n	8002be6 <_vfiprintf_r+0x176>
 8002c5e:	4604      	mov	r4, r0
 8002c60:	2301      	movs	r3, #1
 8002c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8002c66:	e7f0      	b.n	8002c4a <_vfiprintf_r+0x1da>
 8002c68:	ab03      	add	r3, sp, #12
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	4630      	mov	r0, r6
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <_vfiprintf_r+0x25c>)
 8002c72:	a904      	add	r1, sp, #16
 8002c74:	f3af 8000 	nop.w
 8002c78:	4607      	mov	r7, r0
 8002c7a:	1c78      	adds	r0, r7, #1
 8002c7c:	d1d6      	bne.n	8002c2c <_vfiprintf_r+0x1bc>
 8002c7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002c80:	07d9      	lsls	r1, r3, #31
 8002c82:	d405      	bmi.n	8002c90 <_vfiprintf_r+0x220>
 8002c84:	89ab      	ldrh	r3, [r5, #12]
 8002c86:	059a      	lsls	r2, r3, #22
 8002c88:	d402      	bmi.n	8002c90 <_vfiprintf_r+0x220>
 8002c8a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002c8c:	f7ff fe33 	bl	80028f6 <__retarget_lock_release_recursive>
 8002c90:	89ab      	ldrh	r3, [r5, #12]
 8002c92:	065b      	lsls	r3, r3, #25
 8002c94:	f53f af12 	bmi.w	8002abc <_vfiprintf_r+0x4c>
 8002c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c9a:	e711      	b.n	8002ac0 <_vfiprintf_r+0x50>
 8002c9c:	ab03      	add	r3, sp, #12
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	462a      	mov	r2, r5
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <_vfiprintf_r+0x25c>)
 8002ca6:	a904      	add	r1, sp, #16
 8002ca8:	f000 f882 	bl	8002db0 <_printf_i>
 8002cac:	e7e4      	b.n	8002c78 <_vfiprintf_r+0x208>
 8002cae:	bf00      	nop
 8002cb0:	08003668 	.word	0x08003668
 8002cb4:	08003688 	.word	0x08003688
 8002cb8:	08003648 	.word	0x08003648
 8002cbc:	080036a8 	.word	0x080036a8
 8002cc0:	080036ae 	.word	0x080036ae
 8002cc4:	080036b2 	.word	0x080036b2
 8002cc8:	00000000 	.word	0x00000000
 8002ccc:	08002a4b 	.word	0x08002a4b

08002cd0 <_printf_common>:
 8002cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002cd4:	4616      	mov	r6, r2
 8002cd6:	4699      	mov	r9, r3
 8002cd8:	688a      	ldr	r2, [r1, #8]
 8002cda:	690b      	ldr	r3, [r1, #16]
 8002cdc:	4607      	mov	r7, r0
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	bfb8      	it	lt
 8002ce2:	4613      	movlt	r3, r2
 8002ce4:	6033      	str	r3, [r6, #0]
 8002ce6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cea:	460c      	mov	r4, r1
 8002cec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cf0:	b10a      	cbz	r2, 8002cf6 <_printf_common+0x26>
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	6033      	str	r3, [r6, #0]
 8002cf6:	6823      	ldr	r3, [r4, #0]
 8002cf8:	0699      	lsls	r1, r3, #26
 8002cfa:	bf42      	ittt	mi
 8002cfc:	6833      	ldrmi	r3, [r6, #0]
 8002cfe:	3302      	addmi	r3, #2
 8002d00:	6033      	strmi	r3, [r6, #0]
 8002d02:	6825      	ldr	r5, [r4, #0]
 8002d04:	f015 0506 	ands.w	r5, r5, #6
 8002d08:	d106      	bne.n	8002d18 <_printf_common+0x48>
 8002d0a:	f104 0a19 	add.w	sl, r4, #25
 8002d0e:	68e3      	ldr	r3, [r4, #12]
 8002d10:	6832      	ldr	r2, [r6, #0]
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	42ab      	cmp	r3, r5
 8002d16:	dc28      	bgt.n	8002d6a <_printf_common+0x9a>
 8002d18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002d1c:	1e13      	subs	r3, r2, #0
 8002d1e:	6822      	ldr	r2, [r4, #0]
 8002d20:	bf18      	it	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	0692      	lsls	r2, r2, #26
 8002d26:	d42d      	bmi.n	8002d84 <_printf_common+0xb4>
 8002d28:	4649      	mov	r1, r9
 8002d2a:	4638      	mov	r0, r7
 8002d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002d30:	47c0      	blx	r8
 8002d32:	3001      	adds	r0, #1
 8002d34:	d020      	beq.n	8002d78 <_printf_common+0xa8>
 8002d36:	6823      	ldr	r3, [r4, #0]
 8002d38:	68e5      	ldr	r5, [r4, #12]
 8002d3a:	f003 0306 	and.w	r3, r3, #6
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	bf18      	it	ne
 8002d42:	2500      	movne	r5, #0
 8002d44:	6832      	ldr	r2, [r6, #0]
 8002d46:	f04f 0600 	mov.w	r6, #0
 8002d4a:	68a3      	ldr	r3, [r4, #8]
 8002d4c:	bf08      	it	eq
 8002d4e:	1aad      	subeq	r5, r5, r2
 8002d50:	6922      	ldr	r2, [r4, #16]
 8002d52:	bf08      	it	eq
 8002d54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	bfc4      	itt	gt
 8002d5c:	1a9b      	subgt	r3, r3, r2
 8002d5e:	18ed      	addgt	r5, r5, r3
 8002d60:	341a      	adds	r4, #26
 8002d62:	42b5      	cmp	r5, r6
 8002d64:	d11a      	bne.n	8002d9c <_printf_common+0xcc>
 8002d66:	2000      	movs	r0, #0
 8002d68:	e008      	b.n	8002d7c <_printf_common+0xac>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	4652      	mov	r2, sl
 8002d6e:	4649      	mov	r1, r9
 8002d70:	4638      	mov	r0, r7
 8002d72:	47c0      	blx	r8
 8002d74:	3001      	adds	r0, #1
 8002d76:	d103      	bne.n	8002d80 <_printf_common+0xb0>
 8002d78:	f04f 30ff 	mov.w	r0, #4294967295
 8002d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d80:	3501      	adds	r5, #1
 8002d82:	e7c4      	b.n	8002d0e <_printf_common+0x3e>
 8002d84:	2030      	movs	r0, #48	; 0x30
 8002d86:	18e1      	adds	r1, r4, r3
 8002d88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d8c:	1c5a      	adds	r2, r3, #1
 8002d8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d92:	4422      	add	r2, r4
 8002d94:	3302      	adds	r3, #2
 8002d96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d9a:	e7c5      	b.n	8002d28 <_printf_common+0x58>
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	4622      	mov	r2, r4
 8002da0:	4649      	mov	r1, r9
 8002da2:	4638      	mov	r0, r7
 8002da4:	47c0      	blx	r8
 8002da6:	3001      	adds	r0, #1
 8002da8:	d0e6      	beq.n	8002d78 <_printf_common+0xa8>
 8002daa:	3601      	adds	r6, #1
 8002dac:	e7d9      	b.n	8002d62 <_printf_common+0x92>
	...

08002db0 <_printf_i>:
 8002db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002db4:	7e0f      	ldrb	r7, [r1, #24]
 8002db6:	4691      	mov	r9, r2
 8002db8:	2f78      	cmp	r7, #120	; 0x78
 8002dba:	4680      	mov	r8, r0
 8002dbc:	460c      	mov	r4, r1
 8002dbe:	469a      	mov	sl, r3
 8002dc0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002dc6:	d807      	bhi.n	8002dd8 <_printf_i+0x28>
 8002dc8:	2f62      	cmp	r7, #98	; 0x62
 8002dca:	d80a      	bhi.n	8002de2 <_printf_i+0x32>
 8002dcc:	2f00      	cmp	r7, #0
 8002dce:	f000 80d9 	beq.w	8002f84 <_printf_i+0x1d4>
 8002dd2:	2f58      	cmp	r7, #88	; 0x58
 8002dd4:	f000 80a4 	beq.w	8002f20 <_printf_i+0x170>
 8002dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002de0:	e03a      	b.n	8002e58 <_printf_i+0xa8>
 8002de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002de6:	2b15      	cmp	r3, #21
 8002de8:	d8f6      	bhi.n	8002dd8 <_printf_i+0x28>
 8002dea:	a101      	add	r1, pc, #4	; (adr r1, 8002df0 <_printf_i+0x40>)
 8002dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002df0:	08002e49 	.word	0x08002e49
 8002df4:	08002e5d 	.word	0x08002e5d
 8002df8:	08002dd9 	.word	0x08002dd9
 8002dfc:	08002dd9 	.word	0x08002dd9
 8002e00:	08002dd9 	.word	0x08002dd9
 8002e04:	08002dd9 	.word	0x08002dd9
 8002e08:	08002e5d 	.word	0x08002e5d
 8002e0c:	08002dd9 	.word	0x08002dd9
 8002e10:	08002dd9 	.word	0x08002dd9
 8002e14:	08002dd9 	.word	0x08002dd9
 8002e18:	08002dd9 	.word	0x08002dd9
 8002e1c:	08002f6b 	.word	0x08002f6b
 8002e20:	08002e8d 	.word	0x08002e8d
 8002e24:	08002f4d 	.word	0x08002f4d
 8002e28:	08002dd9 	.word	0x08002dd9
 8002e2c:	08002dd9 	.word	0x08002dd9
 8002e30:	08002f8d 	.word	0x08002f8d
 8002e34:	08002dd9 	.word	0x08002dd9
 8002e38:	08002e8d 	.word	0x08002e8d
 8002e3c:	08002dd9 	.word	0x08002dd9
 8002e40:	08002dd9 	.word	0x08002dd9
 8002e44:	08002f55 	.word	0x08002f55
 8002e48:	682b      	ldr	r3, [r5, #0]
 8002e4a:	1d1a      	adds	r2, r3, #4
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	602a      	str	r2, [r5, #0]
 8002e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0a4      	b.n	8002fa6 <_printf_i+0x1f6>
 8002e5c:	6820      	ldr	r0, [r4, #0]
 8002e5e:	6829      	ldr	r1, [r5, #0]
 8002e60:	0606      	lsls	r6, r0, #24
 8002e62:	f101 0304 	add.w	r3, r1, #4
 8002e66:	d50a      	bpl.n	8002e7e <_printf_i+0xce>
 8002e68:	680e      	ldr	r6, [r1, #0]
 8002e6a:	602b      	str	r3, [r5, #0]
 8002e6c:	2e00      	cmp	r6, #0
 8002e6e:	da03      	bge.n	8002e78 <_printf_i+0xc8>
 8002e70:	232d      	movs	r3, #45	; 0x2d
 8002e72:	4276      	negs	r6, r6
 8002e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e78:	230a      	movs	r3, #10
 8002e7a:	485e      	ldr	r0, [pc, #376]	; (8002ff4 <_printf_i+0x244>)
 8002e7c:	e019      	b.n	8002eb2 <_printf_i+0x102>
 8002e7e:	680e      	ldr	r6, [r1, #0]
 8002e80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e84:	602b      	str	r3, [r5, #0]
 8002e86:	bf18      	it	ne
 8002e88:	b236      	sxthne	r6, r6
 8002e8a:	e7ef      	b.n	8002e6c <_printf_i+0xbc>
 8002e8c:	682b      	ldr	r3, [r5, #0]
 8002e8e:	6820      	ldr	r0, [r4, #0]
 8002e90:	1d19      	adds	r1, r3, #4
 8002e92:	6029      	str	r1, [r5, #0]
 8002e94:	0601      	lsls	r1, r0, #24
 8002e96:	d501      	bpl.n	8002e9c <_printf_i+0xec>
 8002e98:	681e      	ldr	r6, [r3, #0]
 8002e9a:	e002      	b.n	8002ea2 <_printf_i+0xf2>
 8002e9c:	0646      	lsls	r6, r0, #25
 8002e9e:	d5fb      	bpl.n	8002e98 <_printf_i+0xe8>
 8002ea0:	881e      	ldrh	r6, [r3, #0]
 8002ea2:	2f6f      	cmp	r7, #111	; 0x6f
 8002ea4:	bf0c      	ite	eq
 8002ea6:	2308      	moveq	r3, #8
 8002ea8:	230a      	movne	r3, #10
 8002eaa:	4852      	ldr	r0, [pc, #328]	; (8002ff4 <_printf_i+0x244>)
 8002eac:	2100      	movs	r1, #0
 8002eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002eb2:	6865      	ldr	r5, [r4, #4]
 8002eb4:	2d00      	cmp	r5, #0
 8002eb6:	bfa8      	it	ge
 8002eb8:	6821      	ldrge	r1, [r4, #0]
 8002eba:	60a5      	str	r5, [r4, #8]
 8002ebc:	bfa4      	itt	ge
 8002ebe:	f021 0104 	bicge.w	r1, r1, #4
 8002ec2:	6021      	strge	r1, [r4, #0]
 8002ec4:	b90e      	cbnz	r6, 8002eca <_printf_i+0x11a>
 8002ec6:	2d00      	cmp	r5, #0
 8002ec8:	d04d      	beq.n	8002f66 <_printf_i+0x1b6>
 8002eca:	4615      	mov	r5, r2
 8002ecc:	fbb6 f1f3 	udiv	r1, r6, r3
 8002ed0:	fb03 6711 	mls	r7, r3, r1, r6
 8002ed4:	5dc7      	ldrb	r7, [r0, r7]
 8002ed6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002eda:	4637      	mov	r7, r6
 8002edc:	42bb      	cmp	r3, r7
 8002ede:	460e      	mov	r6, r1
 8002ee0:	d9f4      	bls.n	8002ecc <_printf_i+0x11c>
 8002ee2:	2b08      	cmp	r3, #8
 8002ee4:	d10b      	bne.n	8002efe <_printf_i+0x14e>
 8002ee6:	6823      	ldr	r3, [r4, #0]
 8002ee8:	07de      	lsls	r6, r3, #31
 8002eea:	d508      	bpl.n	8002efe <_printf_i+0x14e>
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	6861      	ldr	r1, [r4, #4]
 8002ef0:	4299      	cmp	r1, r3
 8002ef2:	bfde      	ittt	le
 8002ef4:	2330      	movle	r3, #48	; 0x30
 8002ef6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002efa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002efe:	1b52      	subs	r2, r2, r5
 8002f00:	6122      	str	r2, [r4, #16]
 8002f02:	464b      	mov	r3, r9
 8002f04:	4621      	mov	r1, r4
 8002f06:	4640      	mov	r0, r8
 8002f08:	f8cd a000 	str.w	sl, [sp]
 8002f0c:	aa03      	add	r2, sp, #12
 8002f0e:	f7ff fedf 	bl	8002cd0 <_printf_common>
 8002f12:	3001      	adds	r0, #1
 8002f14:	d14c      	bne.n	8002fb0 <_printf_i+0x200>
 8002f16:	f04f 30ff 	mov.w	r0, #4294967295
 8002f1a:	b004      	add	sp, #16
 8002f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f20:	4834      	ldr	r0, [pc, #208]	; (8002ff4 <_printf_i+0x244>)
 8002f22:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002f26:	6829      	ldr	r1, [r5, #0]
 8002f28:	6823      	ldr	r3, [r4, #0]
 8002f2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8002f2e:	6029      	str	r1, [r5, #0]
 8002f30:	061d      	lsls	r5, r3, #24
 8002f32:	d514      	bpl.n	8002f5e <_printf_i+0x1ae>
 8002f34:	07df      	lsls	r7, r3, #31
 8002f36:	bf44      	itt	mi
 8002f38:	f043 0320 	orrmi.w	r3, r3, #32
 8002f3c:	6023      	strmi	r3, [r4, #0]
 8002f3e:	b91e      	cbnz	r6, 8002f48 <_printf_i+0x198>
 8002f40:	6823      	ldr	r3, [r4, #0]
 8002f42:	f023 0320 	bic.w	r3, r3, #32
 8002f46:	6023      	str	r3, [r4, #0]
 8002f48:	2310      	movs	r3, #16
 8002f4a:	e7af      	b.n	8002eac <_printf_i+0xfc>
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	f043 0320 	orr.w	r3, r3, #32
 8002f52:	6023      	str	r3, [r4, #0]
 8002f54:	2378      	movs	r3, #120	; 0x78
 8002f56:	4828      	ldr	r0, [pc, #160]	; (8002ff8 <_printf_i+0x248>)
 8002f58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f5c:	e7e3      	b.n	8002f26 <_printf_i+0x176>
 8002f5e:	0659      	lsls	r1, r3, #25
 8002f60:	bf48      	it	mi
 8002f62:	b2b6      	uxthmi	r6, r6
 8002f64:	e7e6      	b.n	8002f34 <_printf_i+0x184>
 8002f66:	4615      	mov	r5, r2
 8002f68:	e7bb      	b.n	8002ee2 <_printf_i+0x132>
 8002f6a:	682b      	ldr	r3, [r5, #0]
 8002f6c:	6826      	ldr	r6, [r4, #0]
 8002f6e:	1d18      	adds	r0, r3, #4
 8002f70:	6961      	ldr	r1, [r4, #20]
 8002f72:	6028      	str	r0, [r5, #0]
 8002f74:	0635      	lsls	r5, r6, #24
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	d501      	bpl.n	8002f7e <_printf_i+0x1ce>
 8002f7a:	6019      	str	r1, [r3, #0]
 8002f7c:	e002      	b.n	8002f84 <_printf_i+0x1d4>
 8002f7e:	0670      	lsls	r0, r6, #25
 8002f80:	d5fb      	bpl.n	8002f7a <_printf_i+0x1ca>
 8002f82:	8019      	strh	r1, [r3, #0]
 8002f84:	2300      	movs	r3, #0
 8002f86:	4615      	mov	r5, r2
 8002f88:	6123      	str	r3, [r4, #16]
 8002f8a:	e7ba      	b.n	8002f02 <_printf_i+0x152>
 8002f8c:	682b      	ldr	r3, [r5, #0]
 8002f8e:	2100      	movs	r1, #0
 8002f90:	1d1a      	adds	r2, r3, #4
 8002f92:	602a      	str	r2, [r5, #0]
 8002f94:	681d      	ldr	r5, [r3, #0]
 8002f96:	6862      	ldr	r2, [r4, #4]
 8002f98:	4628      	mov	r0, r5
 8002f9a:	f000 fa9b 	bl	80034d4 <memchr>
 8002f9e:	b108      	cbz	r0, 8002fa4 <_printf_i+0x1f4>
 8002fa0:	1b40      	subs	r0, r0, r5
 8002fa2:	6060      	str	r0, [r4, #4]
 8002fa4:	6863      	ldr	r3, [r4, #4]
 8002fa6:	6123      	str	r3, [r4, #16]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fae:	e7a8      	b.n	8002f02 <_printf_i+0x152>
 8002fb0:	462a      	mov	r2, r5
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	6923      	ldr	r3, [r4, #16]
 8002fb8:	47d0      	blx	sl
 8002fba:	3001      	adds	r0, #1
 8002fbc:	d0ab      	beq.n	8002f16 <_printf_i+0x166>
 8002fbe:	6823      	ldr	r3, [r4, #0]
 8002fc0:	079b      	lsls	r3, r3, #30
 8002fc2:	d413      	bmi.n	8002fec <_printf_i+0x23c>
 8002fc4:	68e0      	ldr	r0, [r4, #12]
 8002fc6:	9b03      	ldr	r3, [sp, #12]
 8002fc8:	4298      	cmp	r0, r3
 8002fca:	bfb8      	it	lt
 8002fcc:	4618      	movlt	r0, r3
 8002fce:	e7a4      	b.n	8002f1a <_printf_i+0x16a>
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	4632      	mov	r2, r6
 8002fd4:	4649      	mov	r1, r9
 8002fd6:	4640      	mov	r0, r8
 8002fd8:	47d0      	blx	sl
 8002fda:	3001      	adds	r0, #1
 8002fdc:	d09b      	beq.n	8002f16 <_printf_i+0x166>
 8002fde:	3501      	adds	r5, #1
 8002fe0:	68e3      	ldr	r3, [r4, #12]
 8002fe2:	9903      	ldr	r1, [sp, #12]
 8002fe4:	1a5b      	subs	r3, r3, r1
 8002fe6:	42ab      	cmp	r3, r5
 8002fe8:	dcf2      	bgt.n	8002fd0 <_printf_i+0x220>
 8002fea:	e7eb      	b.n	8002fc4 <_printf_i+0x214>
 8002fec:	2500      	movs	r5, #0
 8002fee:	f104 0619 	add.w	r6, r4, #25
 8002ff2:	e7f5      	b.n	8002fe0 <_printf_i+0x230>
 8002ff4:	080036b9 	.word	0x080036b9
 8002ff8:	080036ca 	.word	0x080036ca

08002ffc <_sbrk_r>:
 8002ffc:	b538      	push	{r3, r4, r5, lr}
 8002ffe:	2300      	movs	r3, #0
 8003000:	4d05      	ldr	r5, [pc, #20]	; (8003018 <_sbrk_r+0x1c>)
 8003002:	4604      	mov	r4, r0
 8003004:	4608      	mov	r0, r1
 8003006:	602b      	str	r3, [r5, #0]
 8003008:	f7fd fc40 	bl	800088c <_sbrk>
 800300c:	1c43      	adds	r3, r0, #1
 800300e:	d102      	bne.n	8003016 <_sbrk_r+0x1a>
 8003010:	682b      	ldr	r3, [r5, #0]
 8003012:	b103      	cbz	r3, 8003016 <_sbrk_r+0x1a>
 8003014:	6023      	str	r3, [r4, #0]
 8003016:	bd38      	pop	{r3, r4, r5, pc}
 8003018:	20000160 	.word	0x20000160

0800301c <__sread>:
 800301c:	b510      	push	{r4, lr}
 800301e:	460c      	mov	r4, r1
 8003020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003024:	f000 fab8 	bl	8003598 <_read_r>
 8003028:	2800      	cmp	r0, #0
 800302a:	bfab      	itete	ge
 800302c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800302e:	89a3      	ldrhlt	r3, [r4, #12]
 8003030:	181b      	addge	r3, r3, r0
 8003032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003036:	bfac      	ite	ge
 8003038:	6563      	strge	r3, [r4, #84]	; 0x54
 800303a:	81a3      	strhlt	r3, [r4, #12]
 800303c:	bd10      	pop	{r4, pc}

0800303e <__swrite>:
 800303e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003042:	461f      	mov	r7, r3
 8003044:	898b      	ldrh	r3, [r1, #12]
 8003046:	4605      	mov	r5, r0
 8003048:	05db      	lsls	r3, r3, #23
 800304a:	460c      	mov	r4, r1
 800304c:	4616      	mov	r6, r2
 800304e:	d505      	bpl.n	800305c <__swrite+0x1e>
 8003050:	2302      	movs	r3, #2
 8003052:	2200      	movs	r2, #0
 8003054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003058:	f000 f9c4 	bl	80033e4 <_lseek_r>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	4632      	mov	r2, r6
 8003060:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003064:	81a3      	strh	r3, [r4, #12]
 8003066:	4628      	mov	r0, r5
 8003068:	463b      	mov	r3, r7
 800306a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800306e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003072:	f000 b869 	b.w	8003148 <_write_r>

08003076 <__sseek>:
 8003076:	b510      	push	{r4, lr}
 8003078:	460c      	mov	r4, r1
 800307a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800307e:	f000 f9b1 	bl	80033e4 <_lseek_r>
 8003082:	1c43      	adds	r3, r0, #1
 8003084:	89a3      	ldrh	r3, [r4, #12]
 8003086:	bf15      	itete	ne
 8003088:	6560      	strne	r0, [r4, #84]	; 0x54
 800308a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800308e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003092:	81a3      	strheq	r3, [r4, #12]
 8003094:	bf18      	it	ne
 8003096:	81a3      	strhne	r3, [r4, #12]
 8003098:	bd10      	pop	{r4, pc}

0800309a <__sclose>:
 800309a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800309e:	f000 b8d3 	b.w	8003248 <_close_r>
	...

080030a4 <__swbuf_r>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	460e      	mov	r6, r1
 80030a8:	4614      	mov	r4, r2
 80030aa:	4605      	mov	r5, r0
 80030ac:	b118      	cbz	r0, 80030b6 <__swbuf_r+0x12>
 80030ae:	6983      	ldr	r3, [r0, #24]
 80030b0:	b90b      	cbnz	r3, 80030b6 <__swbuf_r+0x12>
 80030b2:	f7ff fb81 	bl	80027b8 <__sinit>
 80030b6:	4b21      	ldr	r3, [pc, #132]	; (800313c <__swbuf_r+0x98>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	d12b      	bne.n	8003114 <__swbuf_r+0x70>
 80030bc:	686c      	ldr	r4, [r5, #4]
 80030be:	69a3      	ldr	r3, [r4, #24]
 80030c0:	60a3      	str	r3, [r4, #8]
 80030c2:	89a3      	ldrh	r3, [r4, #12]
 80030c4:	071a      	lsls	r2, r3, #28
 80030c6:	d52f      	bpl.n	8003128 <__swbuf_r+0x84>
 80030c8:	6923      	ldr	r3, [r4, #16]
 80030ca:	b36b      	cbz	r3, 8003128 <__swbuf_r+0x84>
 80030cc:	6923      	ldr	r3, [r4, #16]
 80030ce:	6820      	ldr	r0, [r4, #0]
 80030d0:	b2f6      	uxtb	r6, r6
 80030d2:	1ac0      	subs	r0, r0, r3
 80030d4:	6963      	ldr	r3, [r4, #20]
 80030d6:	4637      	mov	r7, r6
 80030d8:	4283      	cmp	r3, r0
 80030da:	dc04      	bgt.n	80030e6 <__swbuf_r+0x42>
 80030dc:	4621      	mov	r1, r4
 80030de:	4628      	mov	r0, r5
 80030e0:	f000 f944 	bl	800336c <_fflush_r>
 80030e4:	bb30      	cbnz	r0, 8003134 <__swbuf_r+0x90>
 80030e6:	68a3      	ldr	r3, [r4, #8]
 80030e8:	3001      	adds	r0, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	60a3      	str	r3, [r4, #8]
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	1c5a      	adds	r2, r3, #1
 80030f2:	6022      	str	r2, [r4, #0]
 80030f4:	701e      	strb	r6, [r3, #0]
 80030f6:	6963      	ldr	r3, [r4, #20]
 80030f8:	4283      	cmp	r3, r0
 80030fa:	d004      	beq.n	8003106 <__swbuf_r+0x62>
 80030fc:	89a3      	ldrh	r3, [r4, #12]
 80030fe:	07db      	lsls	r3, r3, #31
 8003100:	d506      	bpl.n	8003110 <__swbuf_r+0x6c>
 8003102:	2e0a      	cmp	r6, #10
 8003104:	d104      	bne.n	8003110 <__swbuf_r+0x6c>
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 f92f 	bl	800336c <_fflush_r>
 800310e:	b988      	cbnz	r0, 8003134 <__swbuf_r+0x90>
 8003110:	4638      	mov	r0, r7
 8003112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <__swbuf_r+0x9c>)
 8003116:	429c      	cmp	r4, r3
 8003118:	d101      	bne.n	800311e <__swbuf_r+0x7a>
 800311a:	68ac      	ldr	r4, [r5, #8]
 800311c:	e7cf      	b.n	80030be <__swbuf_r+0x1a>
 800311e:	4b09      	ldr	r3, [pc, #36]	; (8003144 <__swbuf_r+0xa0>)
 8003120:	429c      	cmp	r4, r3
 8003122:	bf08      	it	eq
 8003124:	68ec      	ldreq	r4, [r5, #12]
 8003126:	e7ca      	b.n	80030be <__swbuf_r+0x1a>
 8003128:	4621      	mov	r1, r4
 800312a:	4628      	mov	r0, r5
 800312c:	f000 f81e 	bl	800316c <__swsetup_r>
 8003130:	2800      	cmp	r0, #0
 8003132:	d0cb      	beq.n	80030cc <__swbuf_r+0x28>
 8003134:	f04f 37ff 	mov.w	r7, #4294967295
 8003138:	e7ea      	b.n	8003110 <__swbuf_r+0x6c>
 800313a:	bf00      	nop
 800313c:	08003668 	.word	0x08003668
 8003140:	08003688 	.word	0x08003688
 8003144:	08003648 	.word	0x08003648

08003148 <_write_r>:
 8003148:	b538      	push	{r3, r4, r5, lr}
 800314a:	4604      	mov	r4, r0
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	2200      	movs	r2, #0
 8003152:	4d05      	ldr	r5, [pc, #20]	; (8003168 <_write_r+0x20>)
 8003154:	602a      	str	r2, [r5, #0]
 8003156:	461a      	mov	r2, r3
 8003158:	f7fd fb4b 	bl	80007f2 <_write>
 800315c:	1c43      	adds	r3, r0, #1
 800315e:	d102      	bne.n	8003166 <_write_r+0x1e>
 8003160:	682b      	ldr	r3, [r5, #0]
 8003162:	b103      	cbz	r3, 8003166 <_write_r+0x1e>
 8003164:	6023      	str	r3, [r4, #0]
 8003166:	bd38      	pop	{r3, r4, r5, pc}
 8003168:	20000160 	.word	0x20000160

0800316c <__swsetup_r>:
 800316c:	4b32      	ldr	r3, [pc, #200]	; (8003238 <__swsetup_r+0xcc>)
 800316e:	b570      	push	{r4, r5, r6, lr}
 8003170:	681d      	ldr	r5, [r3, #0]
 8003172:	4606      	mov	r6, r0
 8003174:	460c      	mov	r4, r1
 8003176:	b125      	cbz	r5, 8003182 <__swsetup_r+0x16>
 8003178:	69ab      	ldr	r3, [r5, #24]
 800317a:	b913      	cbnz	r3, 8003182 <__swsetup_r+0x16>
 800317c:	4628      	mov	r0, r5
 800317e:	f7ff fb1b 	bl	80027b8 <__sinit>
 8003182:	4b2e      	ldr	r3, [pc, #184]	; (800323c <__swsetup_r+0xd0>)
 8003184:	429c      	cmp	r4, r3
 8003186:	d10f      	bne.n	80031a8 <__swsetup_r+0x3c>
 8003188:	686c      	ldr	r4, [r5, #4]
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003190:	0719      	lsls	r1, r3, #28
 8003192:	d42c      	bmi.n	80031ee <__swsetup_r+0x82>
 8003194:	06dd      	lsls	r5, r3, #27
 8003196:	d411      	bmi.n	80031bc <__swsetup_r+0x50>
 8003198:	2309      	movs	r3, #9
 800319a:	6033      	str	r3, [r6, #0]
 800319c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80031a0:	f04f 30ff 	mov.w	r0, #4294967295
 80031a4:	81a3      	strh	r3, [r4, #12]
 80031a6:	e03e      	b.n	8003226 <__swsetup_r+0xba>
 80031a8:	4b25      	ldr	r3, [pc, #148]	; (8003240 <__swsetup_r+0xd4>)
 80031aa:	429c      	cmp	r4, r3
 80031ac:	d101      	bne.n	80031b2 <__swsetup_r+0x46>
 80031ae:	68ac      	ldr	r4, [r5, #8]
 80031b0:	e7eb      	b.n	800318a <__swsetup_r+0x1e>
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <__swsetup_r+0xd8>)
 80031b4:	429c      	cmp	r4, r3
 80031b6:	bf08      	it	eq
 80031b8:	68ec      	ldreq	r4, [r5, #12]
 80031ba:	e7e6      	b.n	800318a <__swsetup_r+0x1e>
 80031bc:	0758      	lsls	r0, r3, #29
 80031be:	d512      	bpl.n	80031e6 <__swsetup_r+0x7a>
 80031c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80031c2:	b141      	cbz	r1, 80031d6 <__swsetup_r+0x6a>
 80031c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80031c8:	4299      	cmp	r1, r3
 80031ca:	d002      	beq.n	80031d2 <__swsetup_r+0x66>
 80031cc:	4630      	mov	r0, r6
 80031ce:	f000 f99b 	bl	8003508 <_free_r>
 80031d2:	2300      	movs	r3, #0
 80031d4:	6363      	str	r3, [r4, #52]	; 0x34
 80031d6:	89a3      	ldrh	r3, [r4, #12]
 80031d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80031dc:	81a3      	strh	r3, [r4, #12]
 80031de:	2300      	movs	r3, #0
 80031e0:	6063      	str	r3, [r4, #4]
 80031e2:	6923      	ldr	r3, [r4, #16]
 80031e4:	6023      	str	r3, [r4, #0]
 80031e6:	89a3      	ldrh	r3, [r4, #12]
 80031e8:	f043 0308 	orr.w	r3, r3, #8
 80031ec:	81a3      	strh	r3, [r4, #12]
 80031ee:	6923      	ldr	r3, [r4, #16]
 80031f0:	b94b      	cbnz	r3, 8003206 <__swsetup_r+0x9a>
 80031f2:	89a3      	ldrh	r3, [r4, #12]
 80031f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80031f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031fc:	d003      	beq.n	8003206 <__swsetup_r+0x9a>
 80031fe:	4621      	mov	r1, r4
 8003200:	4630      	mov	r0, r6
 8003202:	f000 f927 	bl	8003454 <__smakebuf_r>
 8003206:	89a0      	ldrh	r0, [r4, #12]
 8003208:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800320c:	f010 0301 	ands.w	r3, r0, #1
 8003210:	d00a      	beq.n	8003228 <__swsetup_r+0xbc>
 8003212:	2300      	movs	r3, #0
 8003214:	60a3      	str	r3, [r4, #8]
 8003216:	6963      	ldr	r3, [r4, #20]
 8003218:	425b      	negs	r3, r3
 800321a:	61a3      	str	r3, [r4, #24]
 800321c:	6923      	ldr	r3, [r4, #16]
 800321e:	b943      	cbnz	r3, 8003232 <__swsetup_r+0xc6>
 8003220:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003224:	d1ba      	bne.n	800319c <__swsetup_r+0x30>
 8003226:	bd70      	pop	{r4, r5, r6, pc}
 8003228:	0781      	lsls	r1, r0, #30
 800322a:	bf58      	it	pl
 800322c:	6963      	ldrpl	r3, [r4, #20]
 800322e:	60a3      	str	r3, [r4, #8]
 8003230:	e7f4      	b.n	800321c <__swsetup_r+0xb0>
 8003232:	2000      	movs	r0, #0
 8003234:	e7f7      	b.n	8003226 <__swsetup_r+0xba>
 8003236:	bf00      	nop
 8003238:	2000000c 	.word	0x2000000c
 800323c:	08003668 	.word	0x08003668
 8003240:	08003688 	.word	0x08003688
 8003244:	08003648 	.word	0x08003648

08003248 <_close_r>:
 8003248:	b538      	push	{r3, r4, r5, lr}
 800324a:	2300      	movs	r3, #0
 800324c:	4d05      	ldr	r5, [pc, #20]	; (8003264 <_close_r+0x1c>)
 800324e:	4604      	mov	r4, r0
 8003250:	4608      	mov	r0, r1
 8003252:	602b      	str	r3, [r5, #0]
 8003254:	f7fd fae9 	bl	800082a <_close>
 8003258:	1c43      	adds	r3, r0, #1
 800325a:	d102      	bne.n	8003262 <_close_r+0x1a>
 800325c:	682b      	ldr	r3, [r5, #0]
 800325e:	b103      	cbz	r3, 8003262 <_close_r+0x1a>
 8003260:	6023      	str	r3, [r4, #0]
 8003262:	bd38      	pop	{r3, r4, r5, pc}
 8003264:	20000160 	.word	0x20000160

08003268 <__sflush_r>:
 8003268:	898a      	ldrh	r2, [r1, #12]
 800326a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326c:	4605      	mov	r5, r0
 800326e:	0710      	lsls	r0, r2, #28
 8003270:	460c      	mov	r4, r1
 8003272:	d457      	bmi.n	8003324 <__sflush_r+0xbc>
 8003274:	684b      	ldr	r3, [r1, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	dc04      	bgt.n	8003284 <__sflush_r+0x1c>
 800327a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	dc01      	bgt.n	8003284 <__sflush_r+0x1c>
 8003280:	2000      	movs	r0, #0
 8003282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003284:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003286:	2e00      	cmp	r6, #0
 8003288:	d0fa      	beq.n	8003280 <__sflush_r+0x18>
 800328a:	2300      	movs	r3, #0
 800328c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003290:	682f      	ldr	r7, [r5, #0]
 8003292:	602b      	str	r3, [r5, #0]
 8003294:	d032      	beq.n	80032fc <__sflush_r+0x94>
 8003296:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	075a      	lsls	r2, r3, #29
 800329c:	d505      	bpl.n	80032aa <__sflush_r+0x42>
 800329e:	6863      	ldr	r3, [r4, #4]
 80032a0:	1ac0      	subs	r0, r0, r3
 80032a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80032a4:	b10b      	cbz	r3, 80032aa <__sflush_r+0x42>
 80032a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a8:	1ac0      	subs	r0, r0, r3
 80032aa:	2300      	movs	r3, #0
 80032ac:	4602      	mov	r2, r0
 80032ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80032b0:	4628      	mov	r0, r5
 80032b2:	6a21      	ldr	r1, [r4, #32]
 80032b4:	47b0      	blx	r6
 80032b6:	1c43      	adds	r3, r0, #1
 80032b8:	89a3      	ldrh	r3, [r4, #12]
 80032ba:	d106      	bne.n	80032ca <__sflush_r+0x62>
 80032bc:	6829      	ldr	r1, [r5, #0]
 80032be:	291d      	cmp	r1, #29
 80032c0:	d82c      	bhi.n	800331c <__sflush_r+0xb4>
 80032c2:	4a29      	ldr	r2, [pc, #164]	; (8003368 <__sflush_r+0x100>)
 80032c4:	40ca      	lsrs	r2, r1
 80032c6:	07d6      	lsls	r6, r2, #31
 80032c8:	d528      	bpl.n	800331c <__sflush_r+0xb4>
 80032ca:	2200      	movs	r2, #0
 80032cc:	6062      	str	r2, [r4, #4]
 80032ce:	6922      	ldr	r2, [r4, #16]
 80032d0:	04d9      	lsls	r1, r3, #19
 80032d2:	6022      	str	r2, [r4, #0]
 80032d4:	d504      	bpl.n	80032e0 <__sflush_r+0x78>
 80032d6:	1c42      	adds	r2, r0, #1
 80032d8:	d101      	bne.n	80032de <__sflush_r+0x76>
 80032da:	682b      	ldr	r3, [r5, #0]
 80032dc:	b903      	cbnz	r3, 80032e0 <__sflush_r+0x78>
 80032de:	6560      	str	r0, [r4, #84]	; 0x54
 80032e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032e2:	602f      	str	r7, [r5, #0]
 80032e4:	2900      	cmp	r1, #0
 80032e6:	d0cb      	beq.n	8003280 <__sflush_r+0x18>
 80032e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032ec:	4299      	cmp	r1, r3
 80032ee:	d002      	beq.n	80032f6 <__sflush_r+0x8e>
 80032f0:	4628      	mov	r0, r5
 80032f2:	f000 f909 	bl	8003508 <_free_r>
 80032f6:	2000      	movs	r0, #0
 80032f8:	6360      	str	r0, [r4, #52]	; 0x34
 80032fa:	e7c2      	b.n	8003282 <__sflush_r+0x1a>
 80032fc:	6a21      	ldr	r1, [r4, #32]
 80032fe:	2301      	movs	r3, #1
 8003300:	4628      	mov	r0, r5
 8003302:	47b0      	blx	r6
 8003304:	1c41      	adds	r1, r0, #1
 8003306:	d1c7      	bne.n	8003298 <__sflush_r+0x30>
 8003308:	682b      	ldr	r3, [r5, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d0c4      	beq.n	8003298 <__sflush_r+0x30>
 800330e:	2b1d      	cmp	r3, #29
 8003310:	d001      	beq.n	8003316 <__sflush_r+0xae>
 8003312:	2b16      	cmp	r3, #22
 8003314:	d101      	bne.n	800331a <__sflush_r+0xb2>
 8003316:	602f      	str	r7, [r5, #0]
 8003318:	e7b2      	b.n	8003280 <__sflush_r+0x18>
 800331a:	89a3      	ldrh	r3, [r4, #12]
 800331c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003320:	81a3      	strh	r3, [r4, #12]
 8003322:	e7ae      	b.n	8003282 <__sflush_r+0x1a>
 8003324:	690f      	ldr	r7, [r1, #16]
 8003326:	2f00      	cmp	r7, #0
 8003328:	d0aa      	beq.n	8003280 <__sflush_r+0x18>
 800332a:	0793      	lsls	r3, r2, #30
 800332c:	bf18      	it	ne
 800332e:	2300      	movne	r3, #0
 8003330:	680e      	ldr	r6, [r1, #0]
 8003332:	bf08      	it	eq
 8003334:	694b      	ldreq	r3, [r1, #20]
 8003336:	1bf6      	subs	r6, r6, r7
 8003338:	600f      	str	r7, [r1, #0]
 800333a:	608b      	str	r3, [r1, #8]
 800333c:	2e00      	cmp	r6, #0
 800333e:	dd9f      	ble.n	8003280 <__sflush_r+0x18>
 8003340:	4633      	mov	r3, r6
 8003342:	463a      	mov	r2, r7
 8003344:	4628      	mov	r0, r5
 8003346:	6a21      	ldr	r1, [r4, #32]
 8003348:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800334c:	47e0      	blx	ip
 800334e:	2800      	cmp	r0, #0
 8003350:	dc06      	bgt.n	8003360 <__sflush_r+0xf8>
 8003352:	89a3      	ldrh	r3, [r4, #12]
 8003354:	f04f 30ff 	mov.w	r0, #4294967295
 8003358:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800335c:	81a3      	strh	r3, [r4, #12]
 800335e:	e790      	b.n	8003282 <__sflush_r+0x1a>
 8003360:	4407      	add	r7, r0
 8003362:	1a36      	subs	r6, r6, r0
 8003364:	e7ea      	b.n	800333c <__sflush_r+0xd4>
 8003366:	bf00      	nop
 8003368:	20400001 	.word	0x20400001

0800336c <_fflush_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	690b      	ldr	r3, [r1, #16]
 8003370:	4605      	mov	r5, r0
 8003372:	460c      	mov	r4, r1
 8003374:	b913      	cbnz	r3, 800337c <_fflush_r+0x10>
 8003376:	2500      	movs	r5, #0
 8003378:	4628      	mov	r0, r5
 800337a:	bd38      	pop	{r3, r4, r5, pc}
 800337c:	b118      	cbz	r0, 8003386 <_fflush_r+0x1a>
 800337e:	6983      	ldr	r3, [r0, #24]
 8003380:	b90b      	cbnz	r3, 8003386 <_fflush_r+0x1a>
 8003382:	f7ff fa19 	bl	80027b8 <__sinit>
 8003386:	4b14      	ldr	r3, [pc, #80]	; (80033d8 <_fflush_r+0x6c>)
 8003388:	429c      	cmp	r4, r3
 800338a:	d11b      	bne.n	80033c4 <_fflush_r+0x58>
 800338c:	686c      	ldr	r4, [r5, #4]
 800338e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0ef      	beq.n	8003376 <_fflush_r+0xa>
 8003396:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003398:	07d0      	lsls	r0, r2, #31
 800339a:	d404      	bmi.n	80033a6 <_fflush_r+0x3a>
 800339c:	0599      	lsls	r1, r3, #22
 800339e:	d402      	bmi.n	80033a6 <_fflush_r+0x3a>
 80033a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033a2:	f7ff faa7 	bl	80028f4 <__retarget_lock_acquire_recursive>
 80033a6:	4628      	mov	r0, r5
 80033a8:	4621      	mov	r1, r4
 80033aa:	f7ff ff5d 	bl	8003268 <__sflush_r>
 80033ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033b0:	4605      	mov	r5, r0
 80033b2:	07da      	lsls	r2, r3, #31
 80033b4:	d4e0      	bmi.n	8003378 <_fflush_r+0xc>
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	059b      	lsls	r3, r3, #22
 80033ba:	d4dd      	bmi.n	8003378 <_fflush_r+0xc>
 80033bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80033be:	f7ff fa9a 	bl	80028f6 <__retarget_lock_release_recursive>
 80033c2:	e7d9      	b.n	8003378 <_fflush_r+0xc>
 80033c4:	4b05      	ldr	r3, [pc, #20]	; (80033dc <_fflush_r+0x70>)
 80033c6:	429c      	cmp	r4, r3
 80033c8:	d101      	bne.n	80033ce <_fflush_r+0x62>
 80033ca:	68ac      	ldr	r4, [r5, #8]
 80033cc:	e7df      	b.n	800338e <_fflush_r+0x22>
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <_fflush_r+0x74>)
 80033d0:	429c      	cmp	r4, r3
 80033d2:	bf08      	it	eq
 80033d4:	68ec      	ldreq	r4, [r5, #12]
 80033d6:	e7da      	b.n	800338e <_fflush_r+0x22>
 80033d8:	08003668 	.word	0x08003668
 80033dc:	08003688 	.word	0x08003688
 80033e0:	08003648 	.word	0x08003648

080033e4 <_lseek_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4604      	mov	r4, r0
 80033e8:	4608      	mov	r0, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	2200      	movs	r2, #0
 80033ee:	4d05      	ldr	r5, [pc, #20]	; (8003404 <_lseek_r+0x20>)
 80033f0:	602a      	str	r2, [r5, #0]
 80033f2:	461a      	mov	r2, r3
 80033f4:	f7fd fa3d 	bl	8000872 <_lseek>
 80033f8:	1c43      	adds	r3, r0, #1
 80033fa:	d102      	bne.n	8003402 <_lseek_r+0x1e>
 80033fc:	682b      	ldr	r3, [r5, #0]
 80033fe:	b103      	cbz	r3, 8003402 <_lseek_r+0x1e>
 8003400:	6023      	str	r3, [r4, #0]
 8003402:	bd38      	pop	{r3, r4, r5, pc}
 8003404:	20000160 	.word	0x20000160

08003408 <__swhatbuf_r>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	460e      	mov	r6, r1
 800340c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003410:	4614      	mov	r4, r2
 8003412:	2900      	cmp	r1, #0
 8003414:	461d      	mov	r5, r3
 8003416:	b096      	sub	sp, #88	; 0x58
 8003418:	da08      	bge.n	800342c <__swhatbuf_r+0x24>
 800341a:	2200      	movs	r2, #0
 800341c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8003420:	602a      	str	r2, [r5, #0]
 8003422:	061a      	lsls	r2, r3, #24
 8003424:	d410      	bmi.n	8003448 <__swhatbuf_r+0x40>
 8003426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800342a:	e00e      	b.n	800344a <__swhatbuf_r+0x42>
 800342c:	466a      	mov	r2, sp
 800342e:	f000 f8c5 	bl	80035bc <_fstat_r>
 8003432:	2800      	cmp	r0, #0
 8003434:	dbf1      	blt.n	800341a <__swhatbuf_r+0x12>
 8003436:	9a01      	ldr	r2, [sp, #4]
 8003438:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800343c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003440:	425a      	negs	r2, r3
 8003442:	415a      	adcs	r2, r3
 8003444:	602a      	str	r2, [r5, #0]
 8003446:	e7ee      	b.n	8003426 <__swhatbuf_r+0x1e>
 8003448:	2340      	movs	r3, #64	; 0x40
 800344a:	2000      	movs	r0, #0
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	b016      	add	sp, #88	; 0x58
 8003450:	bd70      	pop	{r4, r5, r6, pc}
	...

08003454 <__smakebuf_r>:
 8003454:	898b      	ldrh	r3, [r1, #12]
 8003456:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003458:	079d      	lsls	r5, r3, #30
 800345a:	4606      	mov	r6, r0
 800345c:	460c      	mov	r4, r1
 800345e:	d507      	bpl.n	8003470 <__smakebuf_r+0x1c>
 8003460:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	6123      	str	r3, [r4, #16]
 8003468:	2301      	movs	r3, #1
 800346a:	6163      	str	r3, [r4, #20]
 800346c:	b002      	add	sp, #8
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	466a      	mov	r2, sp
 8003472:	ab01      	add	r3, sp, #4
 8003474:	f7ff ffc8 	bl	8003408 <__swhatbuf_r>
 8003478:	9900      	ldr	r1, [sp, #0]
 800347a:	4605      	mov	r5, r0
 800347c:	4630      	mov	r0, r6
 800347e:	f7ff fa5b 	bl	8002938 <_malloc_r>
 8003482:	b948      	cbnz	r0, 8003498 <__smakebuf_r+0x44>
 8003484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003488:	059a      	lsls	r2, r3, #22
 800348a:	d4ef      	bmi.n	800346c <__smakebuf_r+0x18>
 800348c:	f023 0303 	bic.w	r3, r3, #3
 8003490:	f043 0302 	orr.w	r3, r3, #2
 8003494:	81a3      	strh	r3, [r4, #12]
 8003496:	e7e3      	b.n	8003460 <__smakebuf_r+0xc>
 8003498:	4b0d      	ldr	r3, [pc, #52]	; (80034d0 <__smakebuf_r+0x7c>)
 800349a:	62b3      	str	r3, [r6, #40]	; 0x28
 800349c:	89a3      	ldrh	r3, [r4, #12]
 800349e:	6020      	str	r0, [r4, #0]
 80034a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a4:	81a3      	strh	r3, [r4, #12]
 80034a6:	9b00      	ldr	r3, [sp, #0]
 80034a8:	6120      	str	r0, [r4, #16]
 80034aa:	6163      	str	r3, [r4, #20]
 80034ac:	9b01      	ldr	r3, [sp, #4]
 80034ae:	b15b      	cbz	r3, 80034c8 <__smakebuf_r+0x74>
 80034b0:	4630      	mov	r0, r6
 80034b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034b6:	f000 f893 	bl	80035e0 <_isatty_r>
 80034ba:	b128      	cbz	r0, 80034c8 <__smakebuf_r+0x74>
 80034bc:	89a3      	ldrh	r3, [r4, #12]
 80034be:	f023 0303 	bic.w	r3, r3, #3
 80034c2:	f043 0301 	orr.w	r3, r3, #1
 80034c6:	81a3      	strh	r3, [r4, #12]
 80034c8:	89a0      	ldrh	r0, [r4, #12]
 80034ca:	4305      	orrs	r5, r0
 80034cc:	81a5      	strh	r5, [r4, #12]
 80034ce:	e7cd      	b.n	800346c <__smakebuf_r+0x18>
 80034d0:	08002751 	.word	0x08002751

080034d4 <memchr>:
 80034d4:	4603      	mov	r3, r0
 80034d6:	b510      	push	{r4, lr}
 80034d8:	b2c9      	uxtb	r1, r1
 80034da:	4402      	add	r2, r0
 80034dc:	4293      	cmp	r3, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	d101      	bne.n	80034e6 <memchr+0x12>
 80034e2:	2000      	movs	r0, #0
 80034e4:	e003      	b.n	80034ee <memchr+0x1a>
 80034e6:	7804      	ldrb	r4, [r0, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	428c      	cmp	r4, r1
 80034ec:	d1f6      	bne.n	80034dc <memchr+0x8>
 80034ee:	bd10      	pop	{r4, pc}

080034f0 <__malloc_lock>:
 80034f0:	4801      	ldr	r0, [pc, #4]	; (80034f8 <__malloc_lock+0x8>)
 80034f2:	f7ff b9ff 	b.w	80028f4 <__retarget_lock_acquire_recursive>
 80034f6:	bf00      	nop
 80034f8:	20000154 	.word	0x20000154

080034fc <__malloc_unlock>:
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <__malloc_unlock+0x8>)
 80034fe:	f7ff b9fa 	b.w	80028f6 <__retarget_lock_release_recursive>
 8003502:	bf00      	nop
 8003504:	20000154 	.word	0x20000154

08003508 <_free_r>:
 8003508:	b538      	push	{r3, r4, r5, lr}
 800350a:	4605      	mov	r5, r0
 800350c:	2900      	cmp	r1, #0
 800350e:	d040      	beq.n	8003592 <_free_r+0x8a>
 8003510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003514:	1f0c      	subs	r4, r1, #4
 8003516:	2b00      	cmp	r3, #0
 8003518:	bfb8      	it	lt
 800351a:	18e4      	addlt	r4, r4, r3
 800351c:	f7ff ffe8 	bl	80034f0 <__malloc_lock>
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <_free_r+0x8c>)
 8003522:	6813      	ldr	r3, [r2, #0]
 8003524:	b933      	cbnz	r3, 8003534 <_free_r+0x2c>
 8003526:	6063      	str	r3, [r4, #4]
 8003528:	6014      	str	r4, [r2, #0]
 800352a:	4628      	mov	r0, r5
 800352c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003530:	f7ff bfe4 	b.w	80034fc <__malloc_unlock>
 8003534:	42a3      	cmp	r3, r4
 8003536:	d908      	bls.n	800354a <_free_r+0x42>
 8003538:	6820      	ldr	r0, [r4, #0]
 800353a:	1821      	adds	r1, r4, r0
 800353c:	428b      	cmp	r3, r1
 800353e:	bf01      	itttt	eq
 8003540:	6819      	ldreq	r1, [r3, #0]
 8003542:	685b      	ldreq	r3, [r3, #4]
 8003544:	1809      	addeq	r1, r1, r0
 8003546:	6021      	streq	r1, [r4, #0]
 8003548:	e7ed      	b.n	8003526 <_free_r+0x1e>
 800354a:	461a      	mov	r2, r3
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	b10b      	cbz	r3, 8003554 <_free_r+0x4c>
 8003550:	42a3      	cmp	r3, r4
 8003552:	d9fa      	bls.n	800354a <_free_r+0x42>
 8003554:	6811      	ldr	r1, [r2, #0]
 8003556:	1850      	adds	r0, r2, r1
 8003558:	42a0      	cmp	r0, r4
 800355a:	d10b      	bne.n	8003574 <_free_r+0x6c>
 800355c:	6820      	ldr	r0, [r4, #0]
 800355e:	4401      	add	r1, r0
 8003560:	1850      	adds	r0, r2, r1
 8003562:	4283      	cmp	r3, r0
 8003564:	6011      	str	r1, [r2, #0]
 8003566:	d1e0      	bne.n	800352a <_free_r+0x22>
 8003568:	6818      	ldr	r0, [r3, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	4401      	add	r1, r0
 800356e:	6011      	str	r1, [r2, #0]
 8003570:	6053      	str	r3, [r2, #4]
 8003572:	e7da      	b.n	800352a <_free_r+0x22>
 8003574:	d902      	bls.n	800357c <_free_r+0x74>
 8003576:	230c      	movs	r3, #12
 8003578:	602b      	str	r3, [r5, #0]
 800357a:	e7d6      	b.n	800352a <_free_r+0x22>
 800357c:	6820      	ldr	r0, [r4, #0]
 800357e:	1821      	adds	r1, r4, r0
 8003580:	428b      	cmp	r3, r1
 8003582:	bf01      	itttt	eq
 8003584:	6819      	ldreq	r1, [r3, #0]
 8003586:	685b      	ldreq	r3, [r3, #4]
 8003588:	1809      	addeq	r1, r1, r0
 800358a:	6021      	streq	r1, [r4, #0]
 800358c:	6063      	str	r3, [r4, #4]
 800358e:	6054      	str	r4, [r2, #4]
 8003590:	e7cb      	b.n	800352a <_free_r+0x22>
 8003592:	bd38      	pop	{r3, r4, r5, pc}
 8003594:	20000158 	.word	0x20000158

08003598 <_read_r>:
 8003598:	b538      	push	{r3, r4, r5, lr}
 800359a:	4604      	mov	r4, r0
 800359c:	4608      	mov	r0, r1
 800359e:	4611      	mov	r1, r2
 80035a0:	2200      	movs	r2, #0
 80035a2:	4d05      	ldr	r5, [pc, #20]	; (80035b8 <_read_r+0x20>)
 80035a4:	602a      	str	r2, [r5, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	f7fd f906 	bl	80007b8 <_read>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_read_r+0x1e>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_read_r+0x1e>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	20000160 	.word	0x20000160

080035bc <_fstat_r>:
 80035bc:	b538      	push	{r3, r4, r5, lr}
 80035be:	2300      	movs	r3, #0
 80035c0:	4d06      	ldr	r5, [pc, #24]	; (80035dc <_fstat_r+0x20>)
 80035c2:	4604      	mov	r4, r0
 80035c4:	4608      	mov	r0, r1
 80035c6:	4611      	mov	r1, r2
 80035c8:	602b      	str	r3, [r5, #0]
 80035ca:	f7fd f939 	bl	8000840 <_fstat>
 80035ce:	1c43      	adds	r3, r0, #1
 80035d0:	d102      	bne.n	80035d8 <_fstat_r+0x1c>
 80035d2:	682b      	ldr	r3, [r5, #0]
 80035d4:	b103      	cbz	r3, 80035d8 <_fstat_r+0x1c>
 80035d6:	6023      	str	r3, [r4, #0]
 80035d8:	bd38      	pop	{r3, r4, r5, pc}
 80035da:	bf00      	nop
 80035dc:	20000160 	.word	0x20000160

080035e0 <_isatty_r>:
 80035e0:	b538      	push	{r3, r4, r5, lr}
 80035e2:	2300      	movs	r3, #0
 80035e4:	4d05      	ldr	r5, [pc, #20]	; (80035fc <_isatty_r+0x1c>)
 80035e6:	4604      	mov	r4, r0
 80035e8:	4608      	mov	r0, r1
 80035ea:	602b      	str	r3, [r5, #0]
 80035ec:	f7fd f937 	bl	800085e <_isatty>
 80035f0:	1c43      	adds	r3, r0, #1
 80035f2:	d102      	bne.n	80035fa <_isatty_r+0x1a>
 80035f4:	682b      	ldr	r3, [r5, #0]
 80035f6:	b103      	cbz	r3, 80035fa <_isatty_r+0x1a>
 80035f8:	6023      	str	r3, [r4, #0]
 80035fa:	bd38      	pop	{r3, r4, r5, pc}
 80035fc:	20000160 	.word	0x20000160

08003600 <_init>:
 8003600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003602:	bf00      	nop
 8003604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003606:	bc08      	pop	{r3}
 8003608:	469e      	mov	lr, r3
 800360a:	4770      	bx	lr

0800360c <_fini>:
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	bf00      	nop
 8003610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003612:	bc08      	pop	{r3}
 8003614:	469e      	mov	lr, r3
 8003616:	4770      	bx	lr
